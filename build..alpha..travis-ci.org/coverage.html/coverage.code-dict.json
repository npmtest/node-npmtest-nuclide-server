{"/home/travis/build/npmtest/node-npmtest-nuclide-server/test.js":"/* istanbul instrument in package npmtest_nuclide_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/lib.npmtest_nuclide_server.js":"/* istanbul instrument in package npmtest_nuclide_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nuclide_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nuclide_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nuclide-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nuclide_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nuclide_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nuclide_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nuclide_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nuclide_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nuclide_server.__dirname + '/lib.npmtest_nuclide_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/nuclide-start-server":"#!/bin/bash\n\n# Copyright (c) 2015-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the LICENSE file in\n# the root directory of this source tree.\n\n# This will make the current directory the real path this script lives in\ncd \"$( cd \"$(dirname $0)\" ; pwd -P )\" > /dev/null 2>&1\n# This will make the current directory the path that contains the scripts dir\ncd \"$(dirname \"$(readlink \"$0\" || printf %s \"$0\")\")\" > /dev/null 2>&1\nscripts/nuclide_server_manager.py \"$@\"\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/blocked.js":"\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n/**\n * Copy of the npm package: blocked, but without the unref, because that doesn't work in apm tests.\n * https://github.com/tj/node-blocked/blob/master/index.js\n *\n * The blocked module checks and reports every event loop block time over a given threshold.\n * @return the interval handler.\n * To cancel, call clearInterval on the returned interval handler.\n */\nmodule.exports = function (fn) {\n  var intervalMs = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n  var thresholdMs = arguments.length <= 2 || arguments[2] === undefined ? 50 : arguments[2];\n\n  var start = Date.now();\n\n  return setInterval(function () {\n    var deltaMs = Date.now() - start;\n    var blockTimeMs = deltaMs - intervalMs;\n    if (blockTimeMs > thresholdMs) {\n      fn(blockTimeMs);\n    }\n    start = Date.now();\n  }, intervalMs);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvYmxvY2tlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CWixNQUFNLENBQUMsT0FBTyxHQUFHLFVBQUMsRUFBRSxFQUErRDtNQUF2QyxVQUFVLHlEQUFHLEdBQUc7TUFBRSxXQUFXLHlEQUFHLEVBQUU7O0FBQzVFLE1BQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQzs7QUFFdkIsU0FBTyxXQUFXLENBQUMsWUFBTTtBQUN2QixRQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO0FBQ25DLFFBQU0sV0FBVyxHQUFHLE9BQU8sR0FBRyxVQUFVLENBQUM7QUFDekMsUUFBSSxXQUFXLEdBQUcsV0FBVyxFQUFFO0FBQzdCLFFBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNqQjtBQUNELFNBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7R0FDcEIsRUFBRSxVQUFVLENBQUMsQ0FBQztDQUNoQixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvYmxvY2tlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qKlxuICogQ29weSBvZiB0aGUgbnBtIHBhY2thZ2U6IGJsb2NrZWQsIGJ1dCB3aXRob3V0IHRoZSB1bnJlZiwgYmVjYXVzZSB0aGF0IGRvZXNuJ3Qgd29yayBpbiBhcG0gdGVzdHMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdGovbm9kZS1ibG9ja2VkL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4gKlxuICogVGhlIGJsb2NrZWQgbW9kdWxlIGNoZWNrcyBhbmQgcmVwb3J0cyBldmVyeSBldmVudCBsb29wIGJsb2NrIHRpbWUgb3ZlciBhIGdpdmVuIHRocmVzaG9sZC5cbiAqIEByZXR1cm4gdGhlIGludGVydmFsIGhhbmRsZXIuXG4gKiBUbyBjYW5jZWwsIGNhbGwgY2xlYXJJbnRlcnZhbCBvbiB0aGUgcmV0dXJuZWQgaW50ZXJ2YWwgaGFuZGxlci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZm46IChtczogbnVtYmVyKSA9PiB2b2lkLCBpbnRlcnZhbE1zID0gMTAwLCB0aHJlc2hvbGRNcyA9IDUwKSA9PiB7XG4gIGxldCBzdGFydCA9IERhdGUubm93KCk7XG5cbiAgcmV0dXJuIHNldEludGVydmFsKCgpID0+IHtcbiAgICBjb25zdCBkZWx0YU1zID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xuICAgIGNvbnN0IGJsb2NrVGltZU1zID0gZGVsdGFNcyAtIGludGVydmFsTXM7XG4gICAgaWYgKGJsb2NrVGltZU1zID4gdGhyZXNob2xkTXMpIHtcbiAgICAgIGZuKGJsb2NrVGltZU1zKTtcbiAgICB9XG4gICAgc3RhcnQgPSBEYXRlLm5vdygpO1xuICB9LCBpbnRlcnZhbE1zKTtcbn07XG4iXX0=\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/config.js":"\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n/**\n  * Currently we have two different ways to config a service in service-config.json:\n  *   1. `{\"useServiceFramework\": false, \"path\": \"path/to/service/file\"}`, a old fashioned way\n  *      to config a service and it is deprecated.\n  *   2. `{\"useServiceFramework\": true,\n  *        \"definition\": \"path/to/service/defintion\",\n  *        \"implementation\": \"path/to/local/implementation\"}, use service framework to config\n  *      a service definition and a local implementation.\n  */\n\nvar fs = require('fs-plus');\nvar path = require('path');\n\nvar PACKAGE_ROOT = path.resolve(__dirname, '..');\n\n// Custom services path is defined in \"package.json\", which is always in the root, so resolve\n// the path to the custom services config from the root as well.\nvar CUSTOM_SERVICES_CONFIG_PATH = path.resolve(PACKAGE_ROOT, require(path.resolve(PACKAGE_ROOT, 'package.json'))['nuclide']['customServices']);\nvar HEARTBEAT_CHANNEL = 'heartbeat';\nvar SERVICE_FRAMEWORK_EVENT_CHANNEL = 'service_framework_event';\nvar SERVICE_FRAMEWORK_RPC_CHANNEL = 'service_framework_rpc';\nvar SERVICE_FRAMEWORK3_CHANNEL = 'service_framework3_rpc';\n\nvar SERVICE_FRAMEWORK_RPC_TIMEOUT_MS = 60 * 1000;\nvar SERVICES_CONFIG_PATH = path.resolve(PACKAGE_ROOT, 'services-config.json');\n\nfunction loadConfigs() {\n  var configList = require(SERVICES_CONFIG_PATH);\n\n  if (fs.isFileSync(CUSTOM_SERVICES_CONFIG_PATH)) {\n    var customConfigs = require(CUSTOM_SERVICES_CONFIG_PATH);\n    configList = configList.concat(customConfigs);\n  }\n\n  return configList;\n}\n\nfunction loadConfigsOfServiceWithServiceFramework() {\n  return loadConfigs().filter(function (config) {\n    return config.useServiceFramework;\n  }).map(function (config) {\n    return {\n      name: config.name,\n      definition: _resolveServiceConfigPath(config.definition),\n      implementation: _resolveServiceConfigPath(config.implementation)\n    };\n  });\n}\n\nfunction loadConfigsOfServiceWithoutServiceFramework() {\n  return loadConfigs().filter(function (config) {\n    return !config.useServiceFramework;\n  }).map(function (config) {\n    return _resolveServiceConfigPath(config.path);\n  });\n}\n\n/**\n  * Resolve service path defined in service-config.json to absolute path. The service path could\n  * be in one of following forms:\n  *   1. A path relative to the folder contains `service-config.json`.\n  *   2. An absolute path.\n  *   3. A path in form of `$dependency_package/path/to/service`. For example,\n  *      'nuclide-commons/lib/array.js'.\n  */\nfunction _resolveServiceConfigPath(serviceConfigPath) {\n  try {\n    return require.resolve(serviceConfigPath);\n  } catch (e) {\n    return path.resolve(path.dirname(SERVICES_CONFIG_PATH), serviceConfigPath);\n  }\n}\n\nmodule.exports = {\n  loadConfigsOfServiceWithoutServiceFramework: loadConfigsOfServiceWithoutServiceFramework,\n  loadConfigsOfServiceWithServiceFramework: loadConfigsOfServiceWithServiceFramework,\n  HEARTBEAT_CHANNEL: HEARTBEAT_CHANNEL,\n  SERVICE_FRAMEWORK_EVENT_CHANNEL: SERVICE_FRAMEWORK_EVENT_CHANNEL,\n  SERVICE_FRAMEWORK_RPC_CHANNEL: SERVICE_FRAMEWORK_RPC_CHANNEL,\n  SERVICE_FRAMEWORK_RPC_TIMEOUT_MS: SERVICE_FRAMEWORK_RPC_TIMEOUT_MS,\n  SERVICE_FRAMEWORK3_CHANNEL: SERVICE_FRAMEWORK3_CHANNEL\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CWixJQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUIsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUU3QixJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQzs7OztBQUluRCxJQUFNLDJCQUEyQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQzlDLFlBQVksRUFDWixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUNqRixDQUFDO0FBQ0YsSUFBTSxpQkFBaUIsR0FBRyxXQUFXLENBQUM7QUFDdEMsSUFBTSwrQkFBK0IsR0FBRyx5QkFBeUIsQ0FBQztBQUNsRSxJQUFNLDZCQUE2QixHQUFHLHVCQUF1QixDQUFDO0FBQzlELElBQU0sMEJBQTBCLEdBQUcsd0JBQXdCLENBQUM7O0FBRTVELElBQU0sZ0NBQWdDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUNuRCxJQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLHNCQUFzQixDQUFDLENBQUM7O0FBRWhGLFNBQVMsV0FBVyxHQUFlO0FBQ2pDLE1BQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDOztBQUUvQyxNQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUMsRUFBRTtBQUM5QyxRQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMzRCxjQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztHQUMvQzs7QUFFRCxTQUFPLFVBQVUsQ0FBQztDQUNuQjs7QUFFRCxTQUFTLHdDQUF3QyxHQUFlO0FBQzlELFNBQU8sV0FBVyxFQUFFLENBQ2pCLE1BQU0sQ0FBQyxVQUFBLE1BQU07V0FBSSxNQUFNLENBQUMsbUJBQW1CO0dBQUEsQ0FBQyxDQUM1QyxHQUFHLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDYixXQUFPO0FBQ0wsVUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0FBQ2pCLGdCQUFVLEVBQUUseUJBQXlCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUN4RCxvQkFBYyxFQUFFLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7S0FDakUsQ0FBQztHQUNILENBQUMsQ0FBQztDQUNOOztBQUVELFNBQVMsMkNBQTJDLEdBQWtCO0FBQ3BFLFNBQU8sV0FBVyxFQUFFLENBQ2pCLE1BQU0sQ0FBQyxVQUFBLE1BQU07V0FBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUI7R0FBQSxDQUFDLENBQzdDLEdBQUcsQ0FBQyxVQUFBLE1BQU07V0FBSSx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQzFEOzs7Ozs7Ozs7O0FBVUQsU0FBUyx5QkFBeUIsQ0FBQyxpQkFBeUIsRUFBVTtBQUNwRSxNQUFJO0FBQ0YsV0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7R0FDM0MsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztHQUM1RTtDQUNGOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZiw2Q0FBMkMsRUFBM0MsMkNBQTJDO0FBQzNDLDBDQUF3QyxFQUF4Qyx3Q0FBd0M7QUFDeEMsbUJBQWlCLEVBQWpCLGlCQUFpQjtBQUNqQixpQ0FBK0IsRUFBL0IsK0JBQStCO0FBQy9CLCtCQUE2QixFQUE3Qiw2QkFBNkI7QUFDN0Isa0NBQWdDLEVBQWhDLGdDQUFnQztBQUNoQyw0QkFBMEIsRUFBMUIsMEJBQTBCO0NBQzNCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtc2VydmVyL2xpYi9jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLyoqXG4gICogQ3VycmVudGx5IHdlIGhhdmUgdHdvIGRpZmZlcmVudCB3YXlzIHRvIGNvbmZpZyBhIHNlcnZpY2UgaW4gc2VydmljZS1jb25maWcuanNvbjpcbiAgKiAgIDEuIGB7XCJ1c2VTZXJ2aWNlRnJhbWV3b3JrXCI6IGZhbHNlLCBcInBhdGhcIjogXCJwYXRoL3RvL3NlcnZpY2UvZmlsZVwifWAsIGEgb2xkIGZhc2hpb25lZCB3YXlcbiAgKiAgICAgIHRvIGNvbmZpZyBhIHNlcnZpY2UgYW5kIGl0IGlzIGRlcHJlY2F0ZWQuXG4gICogICAyLiBge1widXNlU2VydmljZUZyYW1ld29ya1wiOiB0cnVlLFxuICAqICAgICAgICBcImRlZmluaXRpb25cIjogXCJwYXRoL3RvL3NlcnZpY2UvZGVmaW50aW9uXCIsXG4gICogICAgICAgIFwiaW1wbGVtZW50YXRpb25cIjogXCJwYXRoL3RvL2xvY2FsL2ltcGxlbWVudGF0aW9uXCJ9LCB1c2Ugc2VydmljZSBmcmFtZXdvcmsgdG8gY29uZmlnXG4gICogICAgICBhIHNlcnZpY2UgZGVmaW5pdGlvbiBhbmQgYSBsb2NhbCBpbXBsZW1lbnRhdGlvbi5cbiAgKi9cblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcy1wbHVzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBQQUNLQUdFX1JPT1QgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nKTtcblxuLy8gQ3VzdG9tIHNlcnZpY2VzIHBhdGggaXMgZGVmaW5lZCBpbiBcInBhY2thZ2UuanNvblwiLCB3aGljaCBpcyBhbHdheXMgaW4gdGhlIHJvb3QsIHNvIHJlc29sdmVcbi8vIHRoZSBwYXRoIHRvIHRoZSBjdXN0b20gc2VydmljZXMgY29uZmlnIGZyb20gdGhlIHJvb3QgYXMgd2VsbC5cbmNvbnN0IENVU1RPTV9TRVJWSUNFU19DT05GSUdfUEFUSCA9IHBhdGgucmVzb2x2ZShcbiAgUEFDS0FHRV9ST09ULFxuICByZXF1aXJlKHBhdGgucmVzb2x2ZShQQUNLQUdFX1JPT1QsICdwYWNrYWdlLmpzb24nKSlbJ251Y2xpZGUnXVsnY3VzdG9tU2VydmljZXMnXVxuKTtcbmNvbnN0IEhFQVJUQkVBVF9DSEFOTkVMID0gJ2hlYXJ0YmVhdCc7XG5jb25zdCBTRVJWSUNFX0ZSQU1FV09SS19FVkVOVF9DSEFOTkVMID0gJ3NlcnZpY2VfZnJhbWV3b3JrX2V2ZW50JztcbmNvbnN0IFNFUlZJQ0VfRlJBTUVXT1JLX1JQQ19DSEFOTkVMID0gJ3NlcnZpY2VfZnJhbWV3b3JrX3JwYyc7XG5jb25zdCBTRVJWSUNFX0ZSQU1FV09SSzNfQ0hBTk5FTCA9ICdzZXJ2aWNlX2ZyYW1ld29yazNfcnBjJztcblxuY29uc3QgU0VSVklDRV9GUkFNRVdPUktfUlBDX1RJTUVPVVRfTVMgPSA2MCAqIDEwMDA7XG5jb25zdCBTRVJWSUNFU19DT05GSUdfUEFUSCA9IHBhdGgucmVzb2x2ZShQQUNLQUdFX1JPT1QsICdzZXJ2aWNlcy1jb25maWcuanNvbicpO1xuXG5mdW5jdGlvbiBsb2FkQ29uZmlncygpOiBBcnJheTxhbnk+IHtcbiAgbGV0IGNvbmZpZ0xpc3QgPSByZXF1aXJlKFNFUlZJQ0VTX0NPTkZJR19QQVRIKTtcblxuICBpZiAoZnMuaXNGaWxlU3luYyhDVVNUT01fU0VSVklDRVNfQ09ORklHX1BBVEgpKSB7XG4gICAgY29uc3QgY3VzdG9tQ29uZmlncyA9IHJlcXVpcmUoQ1VTVE9NX1NFUlZJQ0VTX0NPTkZJR19QQVRIKTtcbiAgICBjb25maWdMaXN0ID0gY29uZmlnTGlzdC5jb25jYXQoY3VzdG9tQ29uZmlncyk7XG4gIH1cblxuICByZXR1cm4gY29uZmlnTGlzdDtcbn1cblxuZnVuY3Rpb24gbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRoU2VydmljZUZyYW1ld29yaygpOiBBcnJheTxhbnk+IHtcbiAgcmV0dXJuIGxvYWRDb25maWdzKClcbiAgICAuZmlsdGVyKGNvbmZpZyA9PiBjb25maWcudXNlU2VydmljZUZyYW1ld29yaylcbiAgICAubWFwKGNvbmZpZyA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBjb25maWcubmFtZSxcbiAgICAgICAgZGVmaW5pdGlvbjogX3Jlc29sdmVTZXJ2aWNlQ29uZmlnUGF0aChjb25maWcuZGVmaW5pdGlvbiksXG4gICAgICAgIGltcGxlbWVudGF0aW9uOiBfcmVzb2x2ZVNlcnZpY2VDb25maWdQYXRoKGNvbmZpZy5pbXBsZW1lbnRhdGlvbiksXG4gICAgICB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkQ29uZmlnc09mU2VydmljZVdpdGhvdXRTZXJ2aWNlRnJhbWV3b3JrKCk6IEFycmF5PHN0cmluZz4ge1xuICByZXR1cm4gbG9hZENvbmZpZ3MoKVxuICAgIC5maWx0ZXIoY29uZmlnID0+ICFjb25maWcudXNlU2VydmljZUZyYW1ld29yaylcbiAgICAubWFwKGNvbmZpZyA9PiBfcmVzb2x2ZVNlcnZpY2VDb25maWdQYXRoKGNvbmZpZy5wYXRoKSk7XG59XG5cbi8qKlxuICAqIFJlc29sdmUgc2VydmljZSBwYXRoIGRlZmluZWQgaW4gc2VydmljZS1jb25maWcuanNvbiB0byBhYnNvbHV0ZSBwYXRoLiBUaGUgc2VydmljZSBwYXRoIGNvdWxkXG4gICogYmUgaW4gb25lIG9mIGZvbGxvd2luZyBmb3JtczpcbiAgKiAgIDEuIEEgcGF0aCByZWxhdGl2ZSB0byB0aGUgZm9sZGVyIGNvbnRhaW5zIGBzZXJ2aWNlLWNvbmZpZy5qc29uYC5cbiAgKiAgIDIuIEFuIGFic29sdXRlIHBhdGguXG4gICogICAzLiBBIHBhdGggaW4gZm9ybSBvZiBgJGRlcGVuZGVuY3lfcGFja2FnZS9wYXRoL3RvL3NlcnZpY2VgLiBGb3IgZXhhbXBsZSxcbiAgKiAgICAgICdudWNsaWRlLWNvbW1vbnMvbGliL2FycmF5LmpzJy5cbiAgKi9cbmZ1bmN0aW9uIF9yZXNvbHZlU2VydmljZUNvbmZpZ1BhdGgoc2VydmljZUNvbmZpZ1BhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUucmVzb2x2ZShzZXJ2aWNlQ29uZmlnUGF0aCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShTRVJWSUNFU19DT05GSUdfUEFUSCksIHNlcnZpY2VDb25maWdQYXRoKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRob3V0U2VydmljZUZyYW1ld29yayxcbiAgbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRoU2VydmljZUZyYW1ld29yayxcbiAgSEVBUlRCRUFUX0NIQU5ORUwsXG4gIFNFUlZJQ0VfRlJBTUVXT1JLX0VWRU5UX0NIQU5ORUwsXG4gIFNFUlZJQ0VfRlJBTUVXT1JLX1JQQ19DSEFOTkVMLFxuICBTRVJWSUNFX0ZSQU1FV09SS19SUENfVElNRU9VVF9NUyxcbiAgU0VSVklDRV9GUkFNRVdPUkszX0NIQU5ORUwsXG59O1xuIl19\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/main.js":"\n// Swallow the error while runing in open sourced version.\n\nvar main = _asyncToGenerator(function* (args) {\n  var serverStartTimer = (0, _nuclideAnalytics.startTracking)('nuclide-server:start');\n  try {\n    setupServer();\n    var port = args.port;\n    var key = args.key;\n    var cert = args.cert;\n    var ca = args.ca;\n\n    if (key && cert && ca) {\n      key = _fs2['default'].readFileSync(key);\n      cert = _fs2['default'].readFileSync(cert);\n      ca = _fs2['default'].readFileSync(ca);\n    }\n    var server = new _NuclideServer2['default']({\n      port: port,\n      serverKey: key,\n      serverCertificate: cert,\n      certificateAuthorityCertificate: ca,\n      trackEventLoop: true\n    });\n    yield server.connect();\n    serverStartTimer.onSuccess();\n    logger.info('NuclideServer started on port ' + port + '.');\n  } catch (e) {\n    // Ensure logging is configured.\n    yield (0, _nuclideLogging.initialUpdateConfig)();\n    yield serverStartTimer.onError(e);\n    logger.fatal(e);\n    (0, _nuclideLogging.flushLogsAndExit)(1);\n  }\n}\n\n// This should never happen because the server must be started with stderr redirected to a log file.\n);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _nuclideLogging = require('nuclide-logging');\n\nvar _nuclideAnalytics = require('nuclide-analytics');\n\nvar _NuclideServer = require('./NuclideServer');\n\nvar _NuclideServer2 = _interopRequireDefault(_NuclideServer);\n\n'use babel';\n\nvar DEFAULT_PORT = 9090;\n\nvar logger = (0, _nuclideLogging.getLogger)();\n\nfunction setupServer() {\n  try {\n    require('./fb/setup').setupServer();\n  } catch (e) {}\n}\n\nprocess.stderr.on('error', function (error) {\n  throw new Error('Can not write to stderr! :' + error);\n});\n\nprocess.on('uncaughtException', function (err) {\n  // Log the error and continue the server crash.\n  logger.fatal('uncaughtException:', err);\n  // According to the docs, we need to close our server when this happens once we logged or\n  // handled it: https://nodejs.org/api/process.html#process_event_uncaughtexception\n  (0, _nuclideLogging.flushLogsAndExit)(1);\n});\n\n// This works in io.js as of v2.4.0 (possibly earlier versions, as well). Support for this was\n// introduced by https://github.com/nodejs/io.js/pull/758 in io.js.\n//\n// Unfortunately, the analogous change was rejected in Node v0.12.x:\n// https://github.com/joyent/node/issues/8997.\n//\n// We include this code here in anticipation of the Node/io.js merger.\nprocess.on('unhandledRejection', function (error, promise) {\n  logger.error('Unhandled promise rejection ' + promise + '. Error:', error);\n});\n\nvar argv = require('yargs')['default']('port', DEFAULT_PORT).argv;\n\nmain(argv);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUE0QmUsSUFBSSxxQkFBbkIsV0FBb0IsSUFBSSxFQUFFO0FBQ3hCLE1BQU0sZ0JBQWdCLEdBQUcsc0JBaEJuQixhQUFhLEVBZ0JvQixzQkFBc0IsQ0FBQyxDQUFDO0FBQy9ELE1BQUk7QUFDRixlQUFXLEVBQUUsQ0FBQztRQUNQLElBQUksR0FBSSxJQUFJLENBQVosSUFBSTtRQUNOLEdBQUcsR0FBYyxJQUFJLENBQXJCLEdBQUc7UUFBRSxJQUFJLEdBQVEsSUFBSSxDQUFoQixJQUFJO1FBQUUsRUFBRSxHQUFJLElBQUksQ0FBVixFQUFFOztBQUNsQixRQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFO0FBQ3JCLFNBQUcsR0FBRyxnQkFBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsVUFBSSxHQUFHLGdCQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixRQUFFLEdBQUcsZ0JBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzFCO0FBQ0QsUUFBTSxNQUFNLEdBQUcsK0JBQWtCO0FBQy9CLFVBQUksRUFBSixJQUFJO0FBQ0osZUFBUyxFQUFFLEdBQUc7QUFDZCx1QkFBaUIsRUFBRSxJQUFJO0FBQ3ZCLHFDQUErQixFQUFFLEVBQUU7QUFDbkMsb0JBQWMsRUFBRSxJQUFJO0tBQ3JCLENBQUMsQ0FBQztBQUNILFVBQU0sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3ZCLG9CQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQzdCLFVBQU0sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0dBQzVELENBQUMsT0FBTyxDQUFDLEVBQUU7O0FBRVYsVUFBTSxvQkF2QzJCLG1CQUFtQixHQXVDekIsQ0FBQztBQUM1QixVQUFNLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxVQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLHdCQTFDZSxnQkFBZ0IsRUEwQ2QsQ0FBQyxDQUFDLENBQUM7R0FDckI7Q0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBN0NjLElBQUk7Ozs7OEJBQzRDLGlCQUFpQjs7Z0NBQ3BELG1CQUFtQjs7NkJBQ3JCLGlCQUFpQjs7OztBQWQzQyxXQUFXLENBQUM7O0FBZ0JaLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQzs7QUFFMUIsSUFBTSxNQUFNLEdBQUcsb0JBTlAsU0FBUyxHQU1TLENBQUM7O0FBRTNCLFNBQVMsV0FBVyxHQUFTO0FBQzNCLE1BQUk7QUFDRixXQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDckMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUVYO0NBQ0Y7O0FBaUNELE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDLEtBQUssRUFBSztBQUNwQyxRQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixHQUFHLEtBQUssQ0FBQyxDQUFDO0NBQ3ZELENBQUMsQ0FBQzs7QUFFSCxPQUFPLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLFVBQUMsR0FBRyxFQUFLOztBQUV2QyxRQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7QUFHeEMsc0JBeERpQixnQkFBZ0IsRUF3RGhCLENBQUMsQ0FBQyxDQUFDO0NBQ3JCLENBQUMsQ0FBQzs7Ozs7Ozs7O0FBU0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxVQUFDLEtBQUssRUFBRSxPQUFPLEVBQUs7QUFDbkQsUUFBTSxDQUFDLEtBQUssa0NBQWdDLE9BQU8sZUFBWSxLQUFLLENBQUMsQ0FBQztDQUN2RSxDQUFDLENBQUM7O0FBRUgsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUNqQixDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FDN0IsSUFBSSxDQUFDOztBQUVWLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zZXJ2ZXIvbGliL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHtnZXRMb2dnZXIsIGZsdXNoTG9nc0FuZEV4aXQsIGluaXRpYWxVcGRhdGVDb25maWd9IGZyb20gJ251Y2xpZGUtbG9nZ2luZyc7XG5pbXBvcnQge3N0YXJ0VHJhY2tpbmd9IGZyb20gJ251Y2xpZGUtYW5hbHl0aWNzJztcbmltcG9ydCBOdWNsaWRlU2VydmVyIGZyb20gJy4vTnVjbGlkZVNlcnZlcic7XG5cbmNvbnN0IERFRkFVTFRfUE9SVCA9IDkwOTA7XG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcigpO1xuXG5mdW5jdGlvbiBzZXR1cFNlcnZlcigpOiB2b2lkIHtcbiAgdHJ5IHtcbiAgICByZXF1aXJlKCcuL2ZiL3NldHVwJykuc2V0dXBTZXJ2ZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFN3YWxsb3cgdGhlIGVycm9yIHdoaWxlIHJ1bmluZyBpbiBvcGVuIHNvdXJjZWQgdmVyc2lvbi5cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBtYWluKGFyZ3MpIHtcbiAgY29uc3Qgc2VydmVyU3RhcnRUaW1lciA9IHN0YXJ0VHJhY2tpbmcoJ251Y2xpZGUtc2VydmVyOnN0YXJ0Jyk7XG4gIHRyeSB7XG4gICAgc2V0dXBTZXJ2ZXIoKTtcbiAgICBjb25zdCB7cG9ydH0gPSBhcmdzO1xuICAgIGxldCB7a2V5LCBjZXJ0LCBjYX0gPSBhcmdzO1xuICAgIGlmIChrZXkgJiYgY2VydCAmJiBjYSkge1xuICAgICAga2V5ID0gZnMucmVhZEZpbGVTeW5jKGtleSk7XG4gICAgICBjZXJ0ID0gZnMucmVhZEZpbGVTeW5jKGNlcnQpO1xuICAgICAgY2EgPSBmcy5yZWFkRmlsZVN5bmMoY2EpO1xuICAgIH1cbiAgICBjb25zdCBzZXJ2ZXIgPSBuZXcgTnVjbGlkZVNlcnZlcih7XG4gICAgICBwb3J0LFxuICAgICAgc2VydmVyS2V5OiBrZXksXG4gICAgICBzZXJ2ZXJDZXJ0aWZpY2F0ZTogY2VydCxcbiAgICAgIGNlcnRpZmljYXRlQXV0aG9yaXR5Q2VydGlmaWNhdGU6IGNhLFxuICAgICAgdHJhY2tFdmVudExvb3A6IHRydWUsXG4gICAgfSk7XG4gICAgYXdhaXQgc2VydmVyLmNvbm5lY3QoKTtcbiAgICBzZXJ2ZXJTdGFydFRpbWVyLm9uU3VjY2VzcygpO1xuICAgIGxvZ2dlci5pbmZvKCdOdWNsaWRlU2VydmVyIHN0YXJ0ZWQgb24gcG9ydCAnICsgcG9ydCArICcuJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBFbnN1cmUgbG9nZ2luZyBpcyBjb25maWd1cmVkLlxuICAgIGF3YWl0IGluaXRpYWxVcGRhdGVDb25maWcoKTtcbiAgICBhd2FpdCBzZXJ2ZXJTdGFydFRpbWVyLm9uRXJyb3IoZSk7XG4gICAgbG9nZ2VyLmZhdGFsKGUpO1xuICAgIGZsdXNoTG9nc0FuZEV4aXQoMSk7XG4gIH1cbn1cblxuLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIGJlY2F1c2UgdGhlIHNlcnZlciBtdXN0IGJlIHN0YXJ0ZWQgd2l0aCBzdGRlcnIgcmVkaXJlY3RlZCB0byBhIGxvZyBmaWxlLlxucHJvY2Vzcy5zdGRlcnIub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCB3cml0ZSB0byBzdGRlcnIhIDonICsgZXJyb3IpO1xufSk7XG5cbnByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgKGVycikgPT4ge1xuICAvLyBMb2cgdGhlIGVycm9yIGFuZCBjb250aW51ZSB0aGUgc2VydmVyIGNyYXNoLlxuICBsb2dnZXIuZmF0YWwoJ3VuY2F1Z2h0RXhjZXB0aW9uOicsIGVycik7XG4gIC8vIEFjY29yZGluZyB0byB0aGUgZG9jcywgd2UgbmVlZCB0byBjbG9zZSBvdXIgc2VydmVyIHdoZW4gdGhpcyBoYXBwZW5zIG9uY2Ugd2UgbG9nZ2VkIG9yXG4gIC8vIGhhbmRsZWQgaXQ6IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvcHJvY2Vzcy5odG1sI3Byb2Nlc3NfZXZlbnRfdW5jYXVnaHRleGNlcHRpb25cbiAgZmx1c2hMb2dzQW5kRXhpdCgxKTtcbn0pO1xuXG4vLyBUaGlzIHdvcmtzIGluIGlvLmpzIGFzIG9mIHYyLjQuMCAocG9zc2libHkgZWFybGllciB2ZXJzaW9ucywgYXMgd2VsbCkuIFN1cHBvcnQgZm9yIHRoaXMgd2FzXG4vLyBpbnRyb2R1Y2VkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvaW8uanMvcHVsbC83NTggaW4gaW8uanMuXG4vL1xuLy8gVW5mb3J0dW5hdGVseSwgdGhlIGFuYWxvZ291cyBjaGFuZ2Ugd2FzIHJlamVjdGVkIGluIE5vZGUgdjAuMTIueDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvODk5Ny5cbi8vXG4vLyBXZSBpbmNsdWRlIHRoaXMgY29kZSBoZXJlIGluIGFudGljaXBhdGlvbiBvZiB0aGUgTm9kZS9pby5qcyBtZXJnZXIuXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAoZXJyb3IsIHByb21pc2UpID0+IHtcbiAgbG9nZ2VyLmVycm9yKGBVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24gJHtwcm9taXNlfS4gRXJyb3I6YCwgZXJyb3IpO1xufSk7XG5cbmNvbnN0IGFyZ3YgPSByZXF1aXJlKCd5YXJncycpXG4gICAgLmRlZmF1bHQoJ3BvcnQnLCBERUZBVUxUX1BPUlQpXG4gICAgLmFyZ3Y7XG5cbm1haW4oYXJndik7XG4iXX0=\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/NuclideServer.js":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _config = require('./config');\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _serviceframework = require('./serviceframework');\n\nvar _serviceframework2 = _interopRequireDefault(_serviceframework);\n\nvar _nuclideLogging = require('nuclide-logging');\n\n'use babel';\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar blocked = require('./blocked');\nvar connect = require('connect');\n\nvar _require = require('./service-manager');\n\nvar getService = _require.getService;\nvar getRemoteEventName = _require.getRemoteEventName;\n\nvar http = require('http');\nvar https = require('https');\n\nvar _require2 = require('nuclide-service-transformer');\n\nvar parseServiceApiSync = _require2.parseServiceApiSync;\n\nvar _require3 = require('events');\n\nvar EventEmitter = _require3.EventEmitter;\n\nvar WebSocketServer = require('ws').Server;\n\nvar _require4 = require('./utils');\n\nvar deserializeArgs = _require4.deserializeArgs;\nvar sendJsonResponse = _require4.sendJsonResponse;\nvar sendTextResponse = _require4.sendTextResponse;\n\nvar _require5 = require('nuclide-version');\n\nvar getVersion = _require5.getVersion;\n\nvar logger = (0, _nuclideLogging.getLogger)();\n\nvar EVENT_HANDLE_REGISTERED = '_nuclideServerEventHandleRegstered';\n\nvar NuclideServer = (function () {\n  function NuclideServer(options) {\n    _classCallCheck(this, NuclideServer);\n\n    (0, _assert2['default'])(NuclideServer._theServer == null);\n    NuclideServer._theServer = this;\n\n    var serverKey = options.serverKey;\n    var serverCertificate = options.serverCertificate;\n    var port = options.port;\n    var certificateAuthorityCertificate = options.certificateAuthorityCertificate;\n    var trackEventLoop = options.trackEventLoop;\n\n    this._app = connect();\n    this._attachUtilHandlers(this._app);\n    if (serverKey && serverCertificate && certificateAuthorityCertificate) {\n      var webServerOptions = {\n        key: serverKey,\n        cert: serverCertificate,\n        ca: certificateAuthorityCertificate,\n        requestCert: true,\n        rejectUnauthorized: true\n      };\n\n      this._webServer = https.createServer(webServerOptions, this._app);\n    } else {\n      this._webServer = http.createServer(this._app);\n    }\n    this._port = port;\n\n    this._webSocketServer = this._createWebSocketServer();\n    this._clients = {};\n    this._eventSubscriptions = new Map();\n\n    this._setupServices(); // Setup 1.0 and 2.0 services.\n\n    if (trackEventLoop) {\n      blocked(function (ms) {\n        logger.info('NuclideServer event loop blocked for ' + ms + 'ms');\n      });\n    }\n\n    // Setup 3.0 services.\n    this._serverComponent = new _serviceframework2['default'].ServerComponent(this);\n  }\n\n  _createClass(NuclideServer, [{\n    key: '_attachUtilHandlers',\n    value: function _attachUtilHandlers(app) {\n      var _this = this;\n\n      // Add specific method handlers.\n      ['get', 'post', 'delete', 'put'].forEach(function (methodName) {\n        _this._app[methodName] = function (uri, handler) {\n          _this._app.use(uri, function (request, response, next) {\n            if (request.method.toUpperCase() !== methodName.toUpperCase()) {\n              // skip if method doesn't match.\n              return next();\n            } else {\n              handler(request, response, next);\n            }\n          });\n        };\n      });\n    }\n  }, {\n    key: '_createWebSocketServer',\n    value: function _createWebSocketServer() {\n      var _this2 = this;\n\n      var webSocketServer = new WebSocketServer({ server: this._webServer });\n      webSocketServer.on('connection', function (socket) {\n        return _this2._onConnection(socket);\n      });\n      webSocketServer.on('error', function (error) {\n        return logger.error('WebSocketServer Error:', error);\n      });\n      return webSocketServer;\n    }\n  }, {\n    key: '_getServiceFrameworkServiceAndRegisterEventHandle',\n    value: function _getServiceFrameworkServiceAndRegisterEventHandle(serviceConfig, serviceOptions) {\n      var _this3 = this;\n\n      var localServiceInstance = getService(serviceConfig.name, serviceOptions, serviceConfig.implementation);\n      if (localServiceInstance[EVENT_HANDLE_REGISTERED]) {\n        return localServiceInstance;\n      }\n\n      var serviceApi = parseServiceApiSync(serviceConfig.definition, serviceConfig.name);\n\n      serviceApi.eventMethodNames.forEach(function (methodName) {\n        localServiceInstance[methodName].call(localServiceInstance, function () {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var eventName = getRemoteEventName(serviceConfig.name, methodName, serviceOptions);\n          (_this3._eventSubscriptions.get(eventName) || []).forEach(function (clientId) {\n            var client = _this3._clients[clientId];\n\n            if (!client) {\n              logger.warn('Client with clientId: %s not found!', clientId);\n              return;\n            }\n\n            _this3._sendSocketMessage(client, {\n              channel: _config.SERVICE_FRAMEWORK_EVENT_CHANNEL,\n              event: {\n                name: eventName,\n                args: args\n              }\n            });\n          });\n        });\n      });\n      Object.defineProperty(localServiceInstance, EVENT_HANDLE_REGISTERED, { value: true });\n\n      return localServiceInstance;\n    }\n  }, {\n    key: '_registerServiceWithServiceFramework',\n    value: function _registerServiceWithServiceFramework(serviceConfig) {\n      var _this4 = this;\n\n      var serviceApi = parseServiceApiSync(serviceConfig.definition, serviceConfig.name);\n\n      serviceApi.rpcMethodNames.forEach(function (methodName) {\n        _this4._registerService('/' + serviceApi.className + '/' + methodName,\n\n        // Take serviceOptions as first argument for serviceFramework service.\n        // TODO(chenshen) seperate the logic of service initialization.\n        function (serviceOptions) {\n          for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          var localServiceInstance = _this4._getServiceFrameworkServiceAndRegisterEventHandle(serviceConfig, serviceOptions);\n          return localServiceInstance[methodName].apply(localServiceInstance, args);\n        }, 'post');\n      });\n    }\n  }, {\n    key: '_registerServiceWithoutServiceFramework',\n    value: function _registerServiceWithoutServiceFramework(serviceFilePath) {\n      var _require6 = require(serviceFilePath);\n\n      var urlHandlers = _require6.urlHandlers;\n      var services = _require6.services;\n      var initialize = _require6.initialize;\n\n      for (var serviceName in services) {\n        var serviceConfig = services[serviceName];\n        this._registerService(serviceName, serviceConfig.handler, serviceConfig.method, serviceConfig.text);\n      }\n\n      if (urlHandlers) {\n        for (var url in urlHandlers) {\n          var handlerConfig = urlHandlers[url];\n          this._attachUrlHandler(url, handlerConfig.handler, handlerConfig.method);\n        }\n      }\n\n      if (initialize) {\n        initialize(this);\n      }\n    }\n  }, {\n    key: '_setupServices',\n    value: function _setupServices() {\n      var _this5 = this;\n\n      // Lazy require these functions so that we could spyOn them while testing in\n      // ServiceIntegrationTestHelper.\n\n      var _require7 = require('./config');\n\n      var loadConfigsOfServiceWithServiceFramework = _require7.loadConfigsOfServiceWithServiceFramework;\n      var loadConfigsOfServiceWithoutServiceFramework = _require7.loadConfigsOfServiceWithoutServiceFramework;\n\n      this._serviceRegistry = {};\n      this._version = getVersion().toString();\n      this._setupHeartbeatHandler();\n      this._setupServiceFrameworkSubscriptionHandler();\n      this._serviceWithoutServiceFrameworkConfigs = loadConfigsOfServiceWithoutServiceFramework();\n      this._serviceWithServiceFrameworkConfigs = loadConfigsOfServiceWithServiceFramework();\n\n      this._serviceWithoutServiceFrameworkConfigs.forEach(function (config) {\n        _this5._registerServiceWithoutServiceFramework(config);\n        logger.debug('Registered service ' + config + ' without ServiceFramework.');\n      });\n\n      this._serviceWithServiceFrameworkConfigs.forEach(function (config) {\n        _this5._registerServiceWithServiceFramework(config);\n        logger.debug('Registered service ' + config.name + ' with ServiceFramework.');\n      });\n\n      // Setup error handler.\n      this._app.use(function (error, request, response, next) {\n        if (error) {\n          sendJsonResponse(response, { code: error.code, message: error.message }, 500);\n        } else {\n          next();\n        }\n      });\n    }\n  }, {\n    key: '_setupHeartbeatHandler',\n    value: function _setupHeartbeatHandler() {\n      var _this6 = this;\n\n      this._registerService('/' + _config.HEARTBEAT_CHANNEL, _asyncToGenerator(function* () {\n        return _this6._version;\n      }), 'post', true);\n    }\n  }, {\n    key: '_setupServiceFrameworkSubscriptionHandler',\n    value: function _setupServiceFrameworkSubscriptionHandler() {\n      var _this7 = this;\n\n      this._registerService('/serviceFramework/subscribeEvent', function (serviceOptions, clientId, serviceName, methodName) {\n\n        // Create the service instance and register the event handle.\n\n        var _serviceWithServiceFrameworkConfigs$filter = _this7._serviceWithServiceFrameworkConfigs.filter(function (config) {\n          return config.name === serviceName;\n        });\n\n        var _serviceWithServiceFrameworkConfigs$filter2 = _slicedToArray(_serviceWithServiceFrameworkConfigs$filter, 1);\n\n        var serviceConfig = _serviceWithServiceFrameworkConfigs$filter2[0];\n\n        _this7._getServiceFrameworkServiceAndRegisterEventHandle(serviceConfig, serviceOptions);\n\n        var eventName = getRemoteEventName(serviceName, methodName, serviceOptions);\n\n        _this7._eventSubscriptions.set(eventName, (_this7._eventSubscriptions.get(eventName) || new Set()).add(clientId));\n\n        logger.debug(clientId + ' subscribed to ' + eventName);\n      }, 'post');\n\n      this._registerService('/serviceFramework/unsubscribeEvent', function (serviceOptions, clientId, serviceName, methodName) {\n        var eventName = getRemoteEventName(serviceName, methodName, serviceOptions);\n        if (_this7._eventSubscriptions.has(eventName)) {\n          _this7._eventSubscriptions.get(eventName)['delete'](clientId);\n        }\n        logger.debug(clientId + ' unsubscribed to ' + eventName);\n      }, 'post');\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      var _this8 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this8._webServer.on('listening', function () {\n          resolve();\n        });\n        _this8._webServer.on('error', function (e) {\n          _this8._webServer.removeAllListeners();\n          reject(e);\n        });\n        _this8._webServer.listen(_this8._port);\n      });\n    }\n\n    /**\n     * Calls a registered service with a name and arguments.\n     */\n  }, {\n    key: 'callService',\n    value: function callService(serviceName, args) {\n      var serviceFunction = this._serviceRegistry[serviceName];\n      if (!serviceFunction) {\n        throw Error('No service registered with name: ' + serviceName);\n      }\n      return serviceFunction.apply(this, args);\n    }\n\n    /**\n     * Registers a service function to a service name.\n     * This allows simple future calls of the service by name and arguments or http-triggered endpoint calls\n     * with arguments serialized over http.\n     */\n  }, {\n    key: '_registerService',\n    value: function _registerService(serviceName, serviceFunction, method, isTextResponse) {\n      if (method === undefined) method = 'get';\n\n      if (this._serviceRegistry[serviceName]) {\n        throw new Error('A service with this name is already registered:', serviceName);\n      }\n      this._serviceRegistry[serviceName] = serviceFunction;\n      this._registerHttpService(serviceName, method, isTextResponse);\n    }\n  }, {\n    key: '_registerHttpService',\n    value: function _registerHttpService(serviceName, method, isTextResponse) {\n      var _this9 = this;\n\n      var loweredCaseMethod = method.toLowerCase();\n      this._app[loweredCaseMethod](serviceName, _asyncToGenerator(function* (request, response, next) {\n        try {\n          var result = yield _this9.callService(serviceName, deserializeArgs(request.url));\n          if (isTextResponse) {\n            sendTextResponse(response, result || '');\n          } else {\n            sendJsonResponse(response, result);\n          }\n        } catch (e) {\n          // Delegate to the registered connect error handler.\n          next(e);\n        }\n      }));\n    }\n\n    /**\n     * Attach an explicit http connect handler for some services that need request/response related optimizations.\n     * e.g. readFile and writeFile uses it to stream reading and writing files (perf improvement for big files).\n     */\n  }, {\n    key: '_attachUrlHandler',\n    value: function _attachUrlHandler(url, handler) {\n      var method = arguments.length <= 2 || arguments[2] === undefined ? 'get' : arguments[2];\n\n      this._app[method](url, handler);\n    }\n  }, {\n    key: '_onConnection',\n    value: function _onConnection(socket) {\n      var _this10 = this;\n\n      logger.debug('WebSocket connecting');\n\n      var client = null;\n\n      socket.on('error', function (e) {\n        return logger.error('Client #%s error: %s', client ? client.id : 'unkown', e.message);\n      });\n\n      socket.once('message', function (clientId) {\n        client = _this10._clients[clientId] = _this10._clients[clientId] || { subscriptions: {}, id: clientId, messageQueue: [] };\n        // If an existing client, we close its socket before listening to the new socket.\n        if (client.socket) {\n          client.socket.close();\n          client.socket = null;\n        }\n        logger.info('Client #%s connecting with a new socket!', clientId);\n        client.socket = socket;\n        client.messageQueue.splice(0).forEach(function (message) {\n          return _this10._sendSocketMessage(client, message.data);\n        });\n        socket.on('message', function (message) {\n          return _this10._onSocketMessage(client, message);\n        });\n      });\n\n      socket.on('close', function () {\n        if (!client) {\n          return;\n        }\n        if (client.socket === socket) {\n          client.socket = null;\n        }\n        logger.info('Client #%s closing a socket!', client.id);\n        // TODO: enable subscription cleanup when we have a robust reconnect scenario.\n        /*\n        for (var channel in client.subscriptions) {\n          this.unsubscribe(channel, subscriptions[channel]);\n        }\n        this._eventSubscriptions.forEach(value => value.delete(client.id));\n        delete this._clients[client.id];\n        */\n      });\n    }\n  }, {\n    key: '_onSocketMessage',\n    value: _asyncToGenerator(function* (client, message) {\n      message = JSON.parse(message);\n      if (message.protocol && message.protocol === _config.SERVICE_FRAMEWORK3_CHANNEL) {\n        this._serverComponent.handleMessage(client, message);\n        return;\n      }\n\n      var _message = message;\n      var serviceName = _message.serviceName;\n      var methodName = _message.methodName;\n      var methodArgs = _message.methodArgs;\n      var serviceOptions = _message.serviceOptions;\n      var requestId = _message.requestId;\n\n      var result = null;\n      var error = null;\n\n      try {\n        result = yield this.callService('/' + serviceName + '/' + methodName, [serviceOptions].concat(methodArgs));\n      } catch (e) {\n        logger.error('Failed to call %s/%s with error %o', serviceName, methodName, e);\n        error = e;\n      }\n\n      this._sendSocketMessage(client, {\n        channel: _config.SERVICE_FRAMEWORK_RPC_CHANNEL,\n        requestId: requestId,\n        result: result,\n        error: error\n      });\n    })\n  }, {\n    key: '_sendSocketMessage',\n    value: function _sendSocketMessage(client, data) {\n      // Wrap the data in an object, because if `data` is a primitive data type,\n      // finding it in an array would return the first matching item, not necessarily the same inserted item.\n      var message = { data: data };\n      var id = client.id;\n      var socket = client.socket;\n      var messageQueue = client.messageQueue;\n\n      messageQueue.push(message);\n      if (!socket) {\n        return;\n      }\n      socket.send(JSON.stringify(data), function (err) {\n        if (err) {\n          logger.warn('Failed sending socket message to client:', id, data);\n        } else {\n          var messageIndex = messageQueue.indexOf(message);\n          if (messageIndex !== -1) {\n            messageQueue.splice(messageIndex, 1);\n          }\n        }\n      });\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this11 = this;\n\n      (0, _assert2['default'])(NuclideServer._theServer === this);\n      NuclideServer._theServer = null;\n\n      this._webSocketServer.close();\n      this._webServer.close();\n      this._serviceWithoutServiceFrameworkConfigs.forEach(function (service_path) {\n        var _require8 = require(service_path);\n\n        var shutdown = _require8.shutdown;\n\n        if (shutdown) {\n          shutdown(_this11);\n        }\n      });\n    }\n  }], [{\n    key: 'shutdown',\n    value: function shutdown() {\n      logger.info('Shutting down the server');\n      try {\n        if (NuclideServer._theServer != null) {\n          NuclideServer._theServer.close();\n        }\n      } catch (e) {\n        logger.error('Error while shutting down, but proceeding anyway:', e);\n      } finally {\n        (0, _nuclideLogging.flushLogsAndExit)(0);\n      }\n    }\n  }]);\n\n  return NuclideServer;\n})();\n\nmodule.exports = NuclideServer;\n/* eventName */ /* clientId */\n//# sourceMappingURL=data:application/json;base64,\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/serviceframework/index.js":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar _ServerComponent = require('./ServerComponent');\n\nvar _ServerComponent2 = _interopRequireDefault(_ServerComponent);\n\nvar _ClientComponent = require('./ClientComponent');\n\nvar _ClientComponent2 = _interopRequireDefault(_ClientComponent);\n\nvar _config = require('./config');\n\n'use babel';\nexports['default'] = { ServerComponent: _ServerComponent2['default'], ClientComponent: _ClientComponent2['default'], loadServicesConfig: _config.loadServicesConfig };\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvc2VydmljZWZyYW1ld29yay9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OzsrQkFXNkIsbUJBQW1COzs7OytCQUNuQixtQkFBbUI7Ozs7c0JBRWYsVUFBVTs7QUFkM0MsV0FBVyxDQUFDO3FCQWdCRyxFQUFDLGVBQWUsOEJBQUEsRUFBRSxlQUFlLDhCQUFBLEVBQUUsa0JBQWtCLFVBRjVELGtCQUFrQixBQUUwQyxFQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvc2VydmljZWZyYW1ld29yay9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBTZXJ2ZXJDb21wb25lbnQgZnJvbSAgJy4vU2VydmVyQ29tcG9uZW50JztcbmltcG9ydCBDbGllbnRDb21wb25lbnQgZnJvbSAgJy4vQ2xpZW50Q29tcG9uZW50JztcblxuaW1wb3J0IHtsb2FkU2VydmljZXNDb25maWd9IGZyb20gJy4vY29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQge1NlcnZlckNvbXBvbmVudCwgQ2xpZW50Q29tcG9uZW50LCBsb2FkU2VydmljZXNDb25maWd9O1xuIl19\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/serviceframework/ServerComponent.js":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar _rx = require('rx');\n\nvar _nuclideServiceParser = require('nuclide-service-parser');\n\nvar _config = require('./config');\n\nvar _NuclideServer = require('../NuclideServer');\n\nvar _NuclideServer2 = _interopRequireDefault(_NuclideServer);\n\nvar _nuclideServiceParserLibTypeRegistry = require('nuclide-service-parser/lib/TypeRegistry');\n\nvar _nuclideServiceParserLibTypeRegistry2 = _interopRequireDefault(_nuclideServiceParserLibTypeRegistry);\n\n'use babel';\n\nvar logger = require('nuclide-logging').getLogger();\n\nvar ServerComponent = (function () {\n  function ServerComponent(server) {\n    var _this = this;\n\n    _classCallCheck(this, ServerComponent);\n\n    this._server = server;\n\n    this._typeRegistry = new _nuclideServiceParserLibTypeRegistry2['default']();\n    this._functionsByName = new Map();\n    this._classesByName = new Map();\n\n    this._nextObjectId = 1;\n    this._objectRegistry = new Map();\n\n    this._subscriptions = new Map();\n\n    // NuclideUri type requires no transformations (it is done on the client side).\n    this._typeRegistry.registerType('NuclideUri', function (uri) {\n      return uri;\n    }, function (remotePath) {\n      return remotePath;\n    });\n\n    var services = (0, _config.loadServicesConfig)();\n\n    var _loop = function (service) {\n      logger.debug('Registering 3.0 service ' + service.name + '...');\n      try {\n        (function () {\n          var defs = (0, _nuclideServiceParser.getDefinitions)(service.definition);\n          var localImpl = require(service.implementation);\n\n          // Register type aliases.\n          defs.forEach(function (definition) {\n            var name = definition.name;\n            switch (definition.kind) {\n              case 'alias':\n                logger.debug('Registering type alias ' + name + '...');\n                if (definition.definition != null) {\n                  _this._typeRegistry.registerAlias(name, definition.definition);\n                }\n                break;\n              case 'function':\n                // Register module-level functions.\n                _this._registerFunction(service.name + '/' + name, localImpl[name], definition.type);\n                break;\n              case 'interface':\n                // Register interfaces.\n                logger.debug('Registering interface ' + name + '...');\n                _this._classesByName.set(name, {\n                  localImplementation: localImpl[name],\n                  definition: definition\n                });\n\n                _this._typeRegistry.registerType(name, _asyncToGenerator(function* (object) {\n                  // If the object has already been assigned an id, return that id.\n                  if (object._remoteId) {\n                    return object._remoteId;\n                  }\n\n                  // Put the object in the registry.\n                  object._interface = name;\n                  var objectId = _this._nextObjectId;\n                  _this._objectRegistry.set(objectId, object);\n                  object._remoteId = objectId;\n                  _this._nextObjectId++;\n\n                  return objectId;\n                }), _asyncToGenerator(function* (objectId) {\n                  return _this._objectRegistry.get(objectId);\n                }));\n\n                // Register all of the static methods as remote functions.\n                definition.staticMethods.forEach(function (funcType, funcName) {\n                  _this._registerFunction(name + '/' + funcName, localImpl[name][funcName], funcType);\n                });\n                break;\n            }\n          });\n        })();\n      } catch (e) {\n        logger.error('Failed to load service ' + service.name + '. Stack Trace:\\n' + e.stack);\n        return 'continue';\n      }\n    };\n\n    for (var service of services) {\n      var _ret = _loop(service);\n\n      if (_ret === 'continue') continue;\n    }\n  }\n\n  /**\n   * A helper function that let's us 'apply' an array of arguments to a constructor.\n   * It works by creating a new constructor that has the same prototype as the original\n   * constructor, and simply applies the original constructor directly to 'this'.\n   * @returns An instance of classObject.\n   */\n\n  _createClass(ServerComponent, [{\n    key: '_registerFunction',\n    value: function _registerFunction(name, localImpl, type) {\n      logger.debug('Registering function ' + name + '...');\n      if (this._functionsByName.has(name)) {\n        throw new Error('Duplicate RPC function: ' + name);\n      }\n      this._functionsByName.set(name, {\n        localImplementation: localImpl,\n        type: type\n      });\n    }\n  }, {\n    key: 'handleMessage',\n    value: _asyncToGenerator(function* (client, message) {\n      var _this2 = this;\n\n      var requestId = message.requestId;\n\n      var returnVal = null;\n      var returnType = { kind: 'void' };\n      var callError = undefined;\n      var hadError = false;\n\n      try {\n        switch (message.type) {\n          case 'FunctionCall':\n            // Transform arguments and call function.\n\n            var _functionsByName$get = this._functionsByName.get(message['function']),\n                fcLocalImplementation = _functionsByName$get.localImplementation,\n                fcType = _functionsByName$get.type;\n\n            var fcTransfomedArgs = yield Promise.all(message.args.map(function (arg, i) {\n              return _this2._typeRegistry.unmarshal(arg, fcType.argumentTypes[i]);\n            }));\n\n            // Invoke function and return the results.\n            returnType = fcType.returnType;\n            returnVal = fcLocalImplementation.apply(this, fcTransfomedArgs);\n            break;\n          case 'MethodCall':\n            // Get the object.\n            var mcObject = this._objectRegistry.get(message.objectId);\n\n            // Get the method FunctionType description.\n            var mcType = this._classesByName.get(mcObject._interface).definition.instanceMethods.get(message.method);\n\n            // Unmarshal arguments.\n            var mcTransfomedArgs = yield Promise.all(message.args.map(function (arg, i) {\n              return _this2._typeRegistry.unmarshal(arg, mcType.argumentTypes[i]);\n            }));\n\n            // Invoke message.\n            returnType = mcType.returnType;\n            returnVal = mcObject[message.method].apply(mcObject, mcTransfomedArgs);\n            break;\n          case 'NewObject':\n            var _classesByName$get = this._classesByName.get(message['interface']),\n                noLocalImplementation = _classesByName$get.localImplementation,\n                noDefinition = _classesByName$get.definition;\n\n            // Transform arguments.\n            var noTransfomedArgs = yield Promise.all(message.args.map(function (arg, i) {\n              return _this2._typeRegistry.unmarshal(arg, noDefinition.constructorArgs[i]);\n            }));\n\n            // Create a new object and put it in the registry.\n            var noObject = construct(noLocalImplementation, noTransfomedArgs);\n\n            // Return the object, which will automatically be converted to an id through the\n            // marshalling system.\n            returnType = { kind: 'promise', type: { kind: 'named', name: message['interface'] } };\n            returnVal = Promise.resolve(noObject);\n            break;\n          case 'DisposeObject':\n            // Get the object.\n            var doObject = this._objectRegistry.get(message.objectId);\n\n            // Remove the object from the registry, and scrub it's id.\n            doObject._remoteId = undefined;\n            this._objectRegistry['delete'](message.objectId);\n\n            // Call the object's local dispose function.\n            returnType = { kind: 'promise', type: { kind: 'void' } };\n            yield doObject.dispose();\n\n            // Return a void Promise\n            returnVal = Promise.resolve();\n            break;\n          case 'DisposeObservable':\n            // Dispose an in-progress observable, before it has naturally completed.\n            if (this._subscriptions.has(requestId)) {\n              this._subscriptions.get(requestId).dispose();\n              this._subscriptions['delete'](requestId);\n            }\n            break;\n          default:\n            throw new Error('Unkown message type ' + message.type);\n        }\n      } catch (e) {\n        logger.error(e != null ? e.message : e);\n        callError = e;\n        hadError = true;\n      }\n\n      switch (returnType.kind) {\n        case 'void':\n          break; // No need to send anything back to the user.\n        case 'promise':\n          // If there was an error executing the command, we send that back as a rejected promise.\n          if (hadError) {\n            returnVal = Promise.reject(callError);\n          }\n\n          // Ensure that the return value is a promise.\n          if (!isThenable(returnVal)) {\n            returnVal = Promise.reject(new Error('Expected a Promise, but the function returned something else.'));\n          }\n\n          // Marshal the result, to send over the network.\n          returnVal = returnVal.then(function (value) {\n            return _this2._typeRegistry.marshal(value, returnType.type);\n          });\n\n          // Send the result of the promise across the socket.\n          returnVal.then(function (result) {\n            var resultMessage = {\n              channel: 'service_framework3_rpc',\n              type: 'PromiseMessage',\n              requestId: requestId,\n              result: result,\n              hadError: false\n            };\n            _this2._server._sendSocketMessage(client, resultMessage);\n          }, function (error) {\n            var errorMessage = {\n              channel: 'service_framework3_rpc',\n              type: 'ErrorMessage',\n              requestId: requestId,\n              hadError: true,\n              error: formatError(error)\n            };\n            _this2._server._sendSocketMessage(client, errorMessage);\n          });\n          break;\n        case 'observable':\n          // If there was an error executing the command, we send that back as an error Observable.\n          if (hadError) {\n            returnVal = _rx.Observable['throw'](callError);\n          }\n\n          // Ensure that the return value is an observable.\n          if (!isObservable(returnVal)) {\n            returnVal = _rx.Observable['throw'](new Error('Expected an Observable, but the function returned something else.'));\n          }\n\n          // Marshal the result, to send over the network.\n          returnVal = returnVal.concatMap(function (value) {\n            return _this2._typeRegistry.marshal(value, returnType.type);\n          });\n\n          // Send the next, error, and completion events of the observable across the socket.\n          var subscription = returnVal.subscribe(function (data) {\n            var eventMessage = {\n              channel: 'service_framework3_rpc',\n              type: 'ObservableMessage',\n              requestId: requestId,\n              hadError: false,\n              result: {\n                type: 'next',\n                data: data\n              }\n            };\n            _this2._server._sendSocketMessage(client, eventMessage);\n          }, function (error) {\n            var errorMessage = {\n              channel: 'service_framework3_rpc',\n              type: 'ErrorMessage',\n              requestId: requestId,\n              hadError: true,\n              error: formatError(error)\n            };\n            _this2._server._sendSocketMessage(client, errorMessage);\n            _this2._subscriptions['delete'](requestId);\n          }, function (completed) {\n            var eventMessage = {\n              channel: 'service_framework3_rpc',\n              type: 'ObservableMessage',\n              requestId: requestId,\n              hadError: false,\n              result: { type: 'completed' }\n            };\n            _this2._server._sendSocketMessage(client, eventMessage);\n            _this2._subscriptions['delete'](requestId);\n          });\n          this._subscriptions.set(requestId, subscription);\n          break;\n        default:\n          throw new Error('Unkown return type ' + returnType.kind + '.');\n      }\n    })\n  }]);\n\n  return ServerComponent;\n})();\n\nexports['default'] = ServerComponent;\nfunction construct(classObject, args) {\n  function F() {\n    return classObject.apply(this, args);\n  }\n  F.prototype = classObject.prototype;\n  return new F();\n}\n\n/**\n * A helper function that checks if an object is thenable (Promise-like).\n */\nfunction isThenable(object) {\n  return Boolean(object && object.then);\n}\n\n/**\n * A helper function that checks if an object is an Observable.\n */\nfunction isObservable(object) {\n  return Boolean(object && object.concatMap && object.subscribe);\n}\n\n/**\n * Format the error before sending over the web socket.\n * TODO: This should be a custom marshaller registered in the TypeRegistry\n */\nfunction formatError(error) {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      code: error.code,\n      stack: error.stack\n    };\n  } else if (typeof error === 'string') {\n    return error.toString();\n  } else if (error === undefined) {\n    return undefined;\n  } else {\n    return 'Unknown Error: ' + error.toString();\n  }\n}\nmodule.exports = exports['default'];\n\n/**\n * Store a mapping from function name to a structure holding both the local implementation and\n * the type definition of the function.\n */\n\n/**\n * Store a mapping from a class name to a struct containing it's local constructor and it's\n * interface definition.\n */\n//# sourceMappingURL=data:application/json;base64,\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/serviceframework/config.js":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.loadServicesConfig = loadServicesConfig;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\n'use babel';\n\nvar PACKAGE_ROOT = _path2['default'].resolve(__dirname, '..', '..');\n\n/**\n * Load service configs, and resolve all of the paths to absolute paths.\n */\n\nfunction loadServicesConfig() {\n  // $FlowIssue - This path is not recognized.\n  var publicServices = createServiceConfigObject(require('../../services-3.json'));\n  var privateServices = [];\n  try {\n    // $FlowIssue - This path is not recognized.\n    privateServices = createServiceConfigObject(require('../../fb/fb-services-3.json'));\n  } catch (e) {\n    // This file may not exist.\n  }\n  return publicServices.concat(privateServices);\n}\n\n/**\n * Takes the contents of a service config JSON file, and formats each entry into\n * a ConfigEntry.\n */\nfunction createServiceConfigObject(jsonConfig) {\n  return jsonConfig.map(function (config) {\n    // TODO(peterhal): Remove this once all services have had their def files removed.\n    if (config.definition == null) {\n      config.definition = config.implementation;\n    }\n    return {\n      name: config.name,\n      definition: resolveServicePath(config.definition),\n      implementation: resolveServicePath(config.implementation)\n    };\n  });\n}\n\n/**\n * Resolve service path defined in services-3.json to absolute path. The service path could\n * be in one of following forms:\n *   1. A path relative to the folder that contains `service-config.json`.\n *   2. An absolute path.\n *   3. A path in form of `$dependency_package/path/to/service`. For example,\n *      'nuclide-commons/lib/array.js'.\n */\nfunction resolveServicePath(servicePath) {\n  try {\n    return require.resolve(servicePath);\n  } catch (e) {\n    return _path2['default'].resolve(PACKAGE_ROOT, servicePath);\n  }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvc2VydmljZWZyYW1ld29yay9jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O29CQVdpQixNQUFNOzs7O0FBWHZCLFdBQVcsQ0FBQzs7QUFhWixJQUFNLFlBQVksR0FBRyxrQkFBSyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQzs7Ozs7O0FBV2xELFNBQVMsa0JBQWtCLEdBQXVCOztBQUV2RCxNQUFNLGNBQWMsR0FBRyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0FBQ25GLE1BQUksZUFBZSxHQUFHLEVBQUUsQ0FBQztBQUN6QixNQUFJOztBQUVGLG1CQUFlLEdBQUcseUJBQXlCLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQztHQUNyRixDQUFDLE9BQU8sQ0FBQyxFQUFFOztHQUVYO0FBQ0QsU0FBTyxjQUFjLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQy9DOzs7Ozs7QUFNRCxTQUFTLHlCQUF5QixDQUFDLFVBQXlCLEVBQXNCO0FBQ2hGLFNBQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFBLE1BQU0sRUFBSTs7QUFFOUIsUUFBSSxNQUFNLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtBQUM3QixZQUFNLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7S0FDM0M7QUFDRCxXQUFPO0FBQ0wsVUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0FBQ2pCLGdCQUFVLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUNqRCxvQkFBYyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7S0FDMUQsQ0FBQztHQUNILENBQUMsQ0FBQztDQUNKOzs7Ozs7Ozs7O0FBVUQsU0FBUyxrQkFBa0IsQ0FBQyxXQUFtQixFQUFVO0FBQ3ZELE1BQUk7QUFDRixXQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7R0FDckMsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLFdBQU8sa0JBQUssT0FBTyxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQztHQUNoRDtDQUNGIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvc2VydmljZWZyYW1ld29yay9jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgUEFDS0FHRV9ST09UID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJyk7XG5cbnR5cGUgQ29uZmlnRW50cnkgPSB7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVmaW5pdGlvbjpzdHJpbmc7XG4gIGltcGxlbWVudGF0aW9uOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIExvYWQgc2VydmljZSBjb25maWdzLCBhbmQgcmVzb2x2ZSBhbGwgb2YgdGhlIHBhdGhzIHRvIGFic29sdXRlIHBhdGhzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNlcnZpY2VzQ29uZmlnKCk6IEFycmF5PENvbmZpZ0VudHJ5PiB7XG4gIC8vICRGbG93SXNzdWUgLSBUaGlzIHBhdGggaXMgbm90IHJlY29nbml6ZWQuXG4gIGNvbnN0IHB1YmxpY1NlcnZpY2VzID0gY3JlYXRlU2VydmljZUNvbmZpZ09iamVjdChyZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy0zLmpzb24nKSk7XG4gIGxldCBwcml2YXRlU2VydmljZXMgPSBbXTtcbiAgdHJ5IHtcbiAgICAvLyAkRmxvd0lzc3VlIC0gVGhpcyBwYXRoIGlzIG5vdCByZWNvZ25pemVkLlxuICAgIHByaXZhdGVTZXJ2aWNlcyA9IGNyZWF0ZVNlcnZpY2VDb25maWdPYmplY3QocmVxdWlyZSgnLi4vLi4vZmIvZmItc2VydmljZXMtMy5qc29uJykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVGhpcyBmaWxlIG1heSBub3QgZXhpc3QuXG4gIH1cbiAgcmV0dXJuIHB1YmxpY1NlcnZpY2VzLmNvbmNhdChwcml2YXRlU2VydmljZXMpO1xufVxuXG4vKipcbiAqIFRha2VzIHRoZSBjb250ZW50cyBvZiBhIHNlcnZpY2UgY29uZmlnIEpTT04gZmlsZSwgYW5kIGZvcm1hdHMgZWFjaCBlbnRyeSBpbnRvXG4gKiBhIENvbmZpZ0VudHJ5LlxuICovXG5mdW5jdGlvbiBjcmVhdGVTZXJ2aWNlQ29uZmlnT2JqZWN0KGpzb25Db25maWc6IEFycmF5PE9iamVjdD4pOiBBcnJheTxDb25maWdFbnRyeT4ge1xuICByZXR1cm4ganNvbkNvbmZpZy5tYXAoY29uZmlnID0+IHtcbiAgICAvLyBUT0RPKHBldGVyaGFsKTogUmVtb3ZlIHRoaXMgb25jZSBhbGwgc2VydmljZXMgaGF2ZSBoYWQgdGhlaXIgZGVmIGZpbGVzIHJlbW92ZWQuXG4gICAgaWYgKGNvbmZpZy5kZWZpbml0aW9uID09IG51bGwpIHtcbiAgICAgIGNvbmZpZy5kZWZpbml0aW9uID0gY29uZmlnLmltcGxlbWVudGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogY29uZmlnLm5hbWUsXG4gICAgICBkZWZpbml0aW9uOiByZXNvbHZlU2VydmljZVBhdGgoY29uZmlnLmRlZmluaXRpb24pLFxuICAgICAgaW1wbGVtZW50YXRpb246IHJlc29sdmVTZXJ2aWNlUGF0aChjb25maWcuaW1wbGVtZW50YXRpb24pLFxuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIFJlc29sdmUgc2VydmljZSBwYXRoIGRlZmluZWQgaW4gc2VydmljZXMtMy5qc29uIHRvIGFic29sdXRlIHBhdGguIFRoZSBzZXJ2aWNlIHBhdGggY291bGRcbiAqIGJlIGluIG9uZSBvZiBmb2xsb3dpbmcgZm9ybXM6XG4gKiAgIDEuIEEgcGF0aCByZWxhdGl2ZSB0byB0aGUgZm9sZGVyIHRoYXQgY29udGFpbnMgYHNlcnZpY2UtY29uZmlnLmpzb25gLlxuICogICAyLiBBbiBhYnNvbHV0ZSBwYXRoLlxuICogICAzLiBBIHBhdGggaW4gZm9ybSBvZiBgJGRlcGVuZGVuY3lfcGFja2FnZS9wYXRoL3RvL3NlcnZpY2VgLiBGb3IgZXhhbXBsZSxcbiAqICAgICAgJ251Y2xpZGUtY29tbW9ucy9saWIvYXJyYXkuanMnLlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2VydmljZVBhdGgoc2VydmljZVBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUucmVzb2x2ZShzZXJ2aWNlUGF0aCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKFBBQ0tBR0VfUk9PVCwgc2VydmljZVBhdGgpO1xuICB9XG59XG4iXX0=\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/serviceframework/ClientComponent.js":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar _libServiceframeworkConfig = require('../../lib/serviceframework/config');\n\nvar config = _interopRequireWildcard(_libServiceframeworkConfig);\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _events = require('events');\n\nvar _NuclideSocket = require('../NuclideSocket');\n\nvar _NuclideSocket2 = _interopRequireDefault(_NuclideSocket);\n\nvar _rx = require('rx');\n\nvar _config = require('../config');\n\nvar _nuclideServiceParserLibTypeRegistry = require('nuclide-service-parser/lib/TypeRegistry');\n\nvar _nuclideServiceParserLibTypeRegistry2 = _interopRequireDefault(_nuclideServiceParserLibTypeRegistry);\n\nvar _nuclideServiceParser = require('nuclide-service-parser');\n\n'use babel';\n\nvar logger = require('nuclide-logging').getLogger();\n\nvar ClientComponent = (function () {\n  function ClientComponent(emitter, socket, requestIdGenerator) {\n    var _this = this;\n\n    _classCallCheck(this, ClientComponent);\n\n    this._emitter = emitter;\n    this._socket = socket;\n    this._requestIdGenerator = requestIdGenerator;\n\n    this._typeRegistry = new _nuclideServiceParserLibTypeRegistry2['default']();\n    this._objectRegistry = new Map();\n\n    // Setup services.\n    var services = config.loadServicesConfig();\n    for (var service of services) {\n      logger.debug('Registering 3.0 service ' + service.name + '...');\n      try {\n        (function () {\n          var defs = (0, _nuclideServiceParser.getDefinitions)(service.definition);\n          var proxy = (0, _nuclideServiceParser.getProxy)(service.name, service.definition, _this);\n\n          defs.forEach(function (definition) {\n            var name = definition.name;\n            switch (definition.kind) {\n              case 'alias':\n                logger.debug('Registering type alias ' + name + '...');\n                if (definition.definition != null) {\n                  _this._typeRegistry.registerAlias(name, definition.definition);\n                }\n                break;\n              case 'interface':\n                logger.debug('Registering interface ' + name + '.');\n                _this._typeRegistry.registerType(name, _asyncToGenerator(function* (object) {\n                  return yield object._idPromise;\n                }), _asyncToGenerator(function* (objectId) {\n                  // Return a cached proxy, if one already exists, for this object.\n                  if (_this._objectRegistry.has(objectId)) {\n                    return _this._objectRegistry.get(objectId);\n                  }\n\n                  // Generate the proxy by manually setting the prototype of the object to be the\n                  // prototype of the remote proxy constructor.\n                  var object = { _idPromise: Promise.resolve(objectId) };\n                  Object.setPrototypeOf(object, proxy[name].prototype);\n                  _this._objectRegistry.set(objectId, object);\n                  return object;\n                }));\n                break;\n            }\n          });\n        })();\n      } catch (e) {\n        logger.error('Failed to load service ' + service.name + '. Stack Trace:\\n' + e.stack);\n        continue;\n      }\n    }\n  }\n\n  // TODO: This should be a custom marshaller registered in the TypeRegistry\n\n  // Delegate marshalling to the type registry.\n\n  _createClass(ClientComponent, [{\n    key: 'marshal',\n    value: function marshal() {\n      var _typeRegistry;\n\n      return (_typeRegistry = this._typeRegistry).marshal.apply(_typeRegistry, arguments);\n    }\n  }, {\n    key: 'unmarshal',\n    value: function unmarshal() {\n      var _typeRegistry2;\n\n      return (_typeRegistry2 = this._typeRegistry).unmarshal.apply(_typeRegistry2, arguments);\n    }\n  }, {\n    key: 'registerType',\n    value: function registerType() {\n      var _typeRegistry3;\n\n      return (_typeRegistry3 = this._typeRegistry).registerType.apply(_typeRegistry3, arguments);\n    }\n\n    /**\n     * Call a remote function, through the service framework.\n     * @param functionName - The name of the remote function to invoke.\n     * @param returnType - The type of object that this function returns, so the the transport layer can\n     *   register the appropriate listeners.\n     * @param args - The serialized arguments to invoke the remote function with.\n     */\n  }, {\n    key: 'callRemoteFunction',\n    value: function callRemoteFunction(functionName, returnType, args) {\n      var message = {\n        protocol: 'service_framework3_rpc',\n        type: 'FunctionCall',\n        'function': functionName,\n        requestId: this._requestIdGenerator(),\n        args: args\n      };\n      return this._sendMessageAndListenForResult(message, returnType, 'Calling function ' + functionName);\n    }\n\n    /**\n     * Call a method of a remote object, through the service framework.\n     * @param objectId - The id of the remote object.\n     * @param methodName - The name of the method to invoke.\n     * @param returnType - The type of object that this function returns, so the the transport layer can\n     *   register the appropriate listeners.\n     * @param args - The serialized arguments to invoke the remote method with.\n     */\n  }, {\n    key: 'callRemoteMethod',\n    value: function callRemoteMethod(objectId, methodName, returnType, args) {\n      var message = {\n        protocol: 'service_framework3_rpc',\n        type: 'MethodCall',\n        method: methodName,\n        objectId: objectId,\n        requestId: this._requestIdGenerator(),\n        args: args\n      };\n      return this._sendMessageAndListenForResult(message, returnType, 'Calling remote method ' + methodName + '.');\n    }\n\n    /**\n     * Call a remote constructor, returning an id that eventually resolves to a unique identifier\n     * for the object.\n     * @param interfaceName - The name of the remote class for which to construct an object.\n     * @param args - Serialized arguments to pass to the remote constructor.\n     */\n  }, {\n    key: 'createRemoteObject',\n    value: function createRemoteObject(interfaceName, args) {\n      var message = {\n        protocol: 'service_framework3_rpc',\n        type: 'NewObject',\n        'interface': interfaceName,\n        requestId: this._requestIdGenerator(),\n        args: args\n      };\n      return this._sendMessageAndListenForResult(message, 'promise', 'Creating instance of ' + interfaceName);\n    }\n\n    /**\n     * Dispose a remote object. This makes it's proxies unsuable, and calls the `dispose` method on\n     * the remote object.\n     * @param objectId - The numerical id that identifies the remote object.\n     * @returns A Promise that resolves when the object disposal has completed.\n     */\n  }, {\n    key: 'disposeRemoteObject',\n    value: function disposeRemoteObject(objectId) {\n      var message = {\n        protocol: 'service_framework3_rpc',\n        type: 'DisposeObject',\n        requestId: this._requestIdGenerator(),\n        objectId: objectId\n      };\n      return this._sendMessageAndListenForResult(message, 'promise', 'Disposing object ' + objectId);\n    }\n\n    /**\n     * Helper function that listens for a result for the given requestId.\n     * @param returnType - Determines the type of messages we should subscribe to, and what this\n     *   function should return.\n     * @param requestId - The id of the request who's result we are listening for.\n     * @returns Depending on the expected return type, this function either returns undefined, a Promise,\n     *   or an Observable.\n     */\n  }, {\n    key: '_sendMessageAndListenForResult',\n    value: function _sendMessageAndListenForResult(message, returnType, timeoutMessage) {\n      var _this2 = this;\n\n      switch (returnType) {\n        case 'void':\n          this._socket.send(message);\n          return; // No values to return.\n        case 'promise':\n          // Listen for a single message, and resolve or reject a promise on that message.\n          return new Promise(function (resolve, reject) {\n            _this2._socket.send(message);\n            _this2._emitter.once(message.requestId.toString(), function (hadError, error, result) {\n              hadError ? reject(decodeError(error)) : resolve(result);\n            });\n\n            setTimeout(function () {\n              _this2._emitter.removeAllListeners(message.requestId.toString());\n              reject('Timeout after ' + _config.SERVICE_FRAMEWORK_RPC_TIMEOUT_MS + ' for requestId: ' + message.requestId + ', ' + timeoutMessage + '.');\n            }, _config.SERVICE_FRAMEWORK_RPC_TIMEOUT_MS);\n          });\n        case 'observable':\n          var observable = _rx.Observable.create(function (observer) {\n            _this2._socket.send(message);\n\n            // Listen for 'next', 'error', and 'completed' events.\n            _this2._emitter.on(message.requestId.toString(), function (hadError, error, result) {\n              if (hadError) {\n                observer.onError(decodeError(error));\n              } else {\n                (0, _assert2['default'])(result);\n                if (result.type === 'completed') {\n                  observer.onCompleted();\n                } else if (result.type === 'next') {\n                  observer.onNext(result.data);\n                }\n              }\n            });\n\n            // Observable dispose function, which is called on subscription dipsose, on stream\n            // completion, and on stream error.\n            return function () {\n              _this2._emitter.removeAllListeners(message.requestId.toString());\n\n              // Send a message to server to call the dispose function of\n              // the remote Observable subscription.\n              var disposeMessage = {\n                protocol: 'service_framework3_rpc',\n                type: 'DisposeObservable',\n                requestId: message.requestId\n              };\n              _this2._socket.send(disposeMessage);\n            };\n          });\n\n          return observable;\n        default:\n          throw new Error('Unkown return type: ' + returnType + '.');\n      }\n    }\n  }]);\n\n  return ClientComponent;\n})();\n\nexports['default'] = ClientComponent;\nfunction decodeError(encodedError) {\n  if (encodedError != null && typeof encodedError === 'object') {\n    var resultError = new Error();\n    resultError.message = encodedError.message;\n    // $FlowIssue - some Errors (notably file operations) have a code.\n    resultError.code = encodedError.code;\n    resultError.stack = encodedError.stack;\n    return resultError;\n  } else {\n    return encodedError;\n  }\n}\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/NuclideSocket.js":"var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _config = require('./config');\n\n'use babel';\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\nvar url = require('url');\n\nvar _require = require('./utils');\n\nvar asyncRequest = _require.asyncRequest;\n\nvar WebSocket = require('ws');\nvar uuid = require('uuid');\n\nvar _require2 = require('events');\n\nvar EventEmitter = _require2.EventEmitter;\n\nvar logger = require('nuclide-logging').getLogger();\n\nvar INITIAL_RECONNECT_TIME_MS = 10;\nvar MAX_RECONNECT_TIME_MS = 5000;\nvar HEARTBEAT_INTERVAL_MS = 5000;\nvar MAX_HEARTBEAT_AWAY_RECONNECT_MS = 60000;\n\n// TODO(most): Rename class to reflect its new responsibilities (not just WebSocket connection).\n\nvar NuclideSocket = (function (_EventEmitter) {\n  _inherits(NuclideSocket, _EventEmitter);\n\n  function NuclideSocket(serverUri, options) {\n    _classCallCheck(this, NuclideSocket);\n\n    _get(Object.getPrototypeOf(NuclideSocket.prototype), 'constructor', this).call(this);\n    this._serverUri = serverUri;\n    this._options = options;\n    this.id = uuid.v4();\n    this._reconnectTime = INITIAL_RECONNECT_TIME_MS;\n    this._reconnectTimer = null;\n    this._connected = false;\n    this._closed = false;\n    this._previouslyConnected = false;\n    this._cachedMessages = [];\n\n    var _url$parse = url.parse(serverUri);\n\n    var protocol = _url$parse.protocol;\n    var host = _url$parse.host;\n\n    this._websocketUri = 'ws' + (protocol === 'https:' ? 's' : '') + '://' + host;\n\n    this._heartbeatConnectedOnce = false;\n    this._lastHeartbeat = null;\n    this._lastHeartbeatTime = null;\n    this._monitorServerHeartbeat();\n\n    this._reconnect();\n  }\n\n  _createClass(NuclideSocket, [{\n    key: 'waitForConnect',\n    value: function waitForConnect() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this._connected) {\n          return resolve();\n        } else {\n          _this.on('connect', resolve);\n          _this.on('reconnect', resolve);\n        }\n      });\n    }\n  }, {\n    key: '_reconnect',\n    value: function _reconnect() {\n      var _this2 = this;\n\n      var _options = this._options;\n      var certificateAuthorityCertificate = _options.certificateAuthorityCertificate;\n      var clientKey = _options.clientKey;\n      var clientCertificate = _options.clientCertificate;\n\n      var websocket = new WebSocket(this._websocketUri, {\n        cert: clientCertificate,\n        key: clientKey,\n        ca: certificateAuthorityCertificate\n      });\n\n      var onSocketOpen = function onSocketOpen() {\n        _this2._websocket = websocket;\n        _this2._reconnectTime = INITIAL_RECONNECT_TIME_MS;\n        // Handshake the server with my client id to manage my re-connect attemp, if it is.\n        websocket.send(_this2.id, function () {\n          _this2._connected = true;\n          _this2.emit('status', _this2._connected);\n          if (_this2._previouslyConnected) {\n            logger.info('WebSocket reconnected');\n            _this2.emit('reconnect');\n          } else {\n            logger.info('WebSocket connected');\n            _this2.emit('connect');\n          }\n          _this2._previouslyConnected = true;\n          _this2._cachedMessages.splice(0).forEach(function (message) {\n            return _this2.send(message.data);\n          });\n        });\n      };\n      websocket.on('open', onSocketOpen);\n\n      var onSocketClose = function onSocketClose() {\n        if (_this2._websocket !== websocket) {\n          return;\n        }\n        logger.info('WebSocket closed.');\n        _this2._websocket = null;\n        _this2._disconnect();\n        if (!_this2._closed) {\n          logger.info('WebSocket reconnecting after closed.');\n          _this2._scheduleReconnect();\n        }\n      };\n      websocket.on('close', onSocketClose);\n\n      var onSocketError = function onSocketError(error) {\n        if (_this2._websocket !== websocket) {\n          return;\n        }\n        logger.error('WebSocket Error - reconnecting...', error);\n        _this2._cleanWebSocket();\n        _this2._scheduleReconnect();\n      };\n      websocket.on('error', onSocketError);\n\n      var onSocketMessage = function onSocketMessage(data, flags) {\n        // flags.binary will be set if a binary data is received.\n        // flags.masked will be set if the data was masked.\n        var json = JSON.parse(data);\n        _this2.emit('message', json);\n      };\n\n      websocket.on('message', onSocketMessage);\n      // WebSocket inherits from EventEmitter, and doesn't dispose the listeners on close.\n      // Here, I added an expando property function to allow disposing those listeners on the created\n      // instance.\n      websocket.dispose = function () {\n        websocket.removeListener('open', onSocketOpen);\n        websocket.removeListener('close', onSocketClose);\n        websocket.removeListener('error', onSocketError);\n        websocket.removeListener('message', onSocketMessage);\n      };\n    }\n  }, {\n    key: '_disconnect',\n    value: function _disconnect() {\n      this._connected = false;\n      this.emit('status', this._connected);\n      this.emit('disconnect');\n    }\n  }, {\n    key: '_cleanWebSocket',\n    value: function _cleanWebSocket() {\n      var websocket = this._websocket;\n      if (websocket != null) {\n        websocket.dispose();\n        websocket.close();\n        this._websocket = null;\n      }\n    }\n  }, {\n    key: '_scheduleReconnect',\n    value: function _scheduleReconnect() {\n      var _this3 = this;\n\n      if (this._reconnectTimer) {\n        return;\n      }\n      // Exponential reconnect time trials.\n      this._reconnectTimer = setTimeout(function () {\n        _this3._reconnectTimer = null;\n        _this3._reconnect();\n      }, this._reconnectTime);\n      this._reconnectTime = this._reconnectTime * 2;\n      if (this._reconnectTime > MAX_RECONNECT_TIME_MS) {\n        this._reconnectTime = MAX_RECONNECT_TIME_MS;\n      }\n    }\n  }, {\n    key: '_clearReconnectTimer',\n    value: function _clearReconnectTimer() {\n      if (this._reconnectTimer) {\n        clearTimeout(this._reconnectTimer);\n        this._reconnectTimer = null;\n      }\n    }\n  }, {\n    key: 'send',\n    value: function send(data) {\n      var _this4 = this;\n\n      // Wrap the data in an object, because if `data` is a primitive data type,\n      // finding it in an array would return the first matching item, not necessarily the same\n      // inserted item.\n      var message = { data: data };\n      this._cachedMessages.push(message);\n      if (!this._connected) {\n        return;\n      }\n\n      var websocket = this._websocket;\n      if (websocket == null) {\n        return;\n      }\n      websocket.send(JSON.stringify(data), function (err) {\n        if (err) {\n          logger.warn('WebSocket error, but caching the message:', err);\n        } else {\n          var messageIndex = _this4._cachedMessages.indexOf(message);\n          if (messageIndex !== -1) {\n            _this4._cachedMessages.splice(messageIndex, 1);\n          }\n        }\n      });\n    }\n  }, {\n    key: 'xhrRequest',\n    value: _asyncToGenerator(function* (options) {\n      var _options2 = this._options;\n      var certificateAuthorityCertificate = _options2.certificateAuthorityCertificate;\n      var clientKey = _options2.clientKey;\n      var clientCertificate = _options2.clientCertificate;\n\n      if (certificateAuthorityCertificate && clientKey && clientCertificate) {\n        options.agentOptions = {\n          ca: certificateAuthorityCertificate,\n          key: clientKey,\n          cert: clientCertificate\n        };\n      }\n\n      options.uri = this._serverUri + '/' + options.uri;\n\n      var _ref = yield asyncRequest(options);\n\n      var body = _ref.body;\n\n      return body;\n    })\n  }, {\n    key: '_monitorServerHeartbeat',\n    value: function _monitorServerHeartbeat() {\n      var _this5 = this;\n\n      this._heartbeat();\n      this._heartbeatInterval = setInterval(function () {\n        return _this5._heartbeat();\n      }, HEARTBEAT_INTERVAL_MS);\n    }\n\n    // Resolves if the connection looks healthy.\n    // Will reject quickly if the connection looks unhealthy.\n  }, {\n    key: 'testConnection',\n    value: function testConnection() {\n      return this._sendHeartBeat();\n    }\n  }, {\n    key: '_sendHeartBeat',\n    value: function _sendHeartBeat() {\n      return this.xhrRequest({\n        uri: _config.HEARTBEAT_CHANNEL,\n        method: 'POST'\n      });\n    }\n  }, {\n    key: '_heartbeat',\n    value: _asyncToGenerator(function* () {\n      try {\n        yield this._sendHeartBeat();\n        this._heartbeatConnectedOnce = true;\n        var now = Date.now();\n        this._lastHeartbeatTime = this._lastHeartbeatTime || now;\n        if (this._lastHeartbeat === 'away' || now - this._lastHeartbeatTime > MAX_HEARTBEAT_AWAY_RECONNECT_MS) {\n          // Trigger a websocket reconnect.\n          this._cleanWebSocket();\n          this._scheduleReconnect();\n        }\n        this._lastHeartbeat = 'here';\n        this._lastHeartbeatTime = now;\n        this.emit('heartbeat');\n      } catch (err) {\n        this._disconnect();\n        this._lastHeartbeat = 'away';\n        // Error code could could be one of:\n        // ['ENOTFOUND', 'ECONNREFUSED', 'ECONNRESET', 'ETIMEDOUT']\n        // A heuristic mapping is done between the xhr error code to the state of server connection.\n        var originalCode = err.code;\n        var message = err.message;\n\n        var code = null;\n        switch (originalCode) {\n          case 'ENOTFOUND':\n          // A socket operation failed because the network was down.\n          case 'ENETDOWN':\n          // The range of the temporary ports for connection are all taken,\n          // This is temporal with many http requests, but should be counted as a network away event.\n          case 'EADDRNOTAVAIL':\n          // The host server is unreachable, could be in a VPN.\n          case 'EHOSTUNREACH':\n          // A request timeout is considered a network away event.\n          case 'ETIMEDOUT':\n            code = 'NETWORK_AWAY';\n            break;\n          case 'ECONNREFUSED':\n            // Server shut down or port no longer accessible.\n            if (this._heartbeatConnectedOnce) {\n              code = 'SERVER_CRASHED';\n            } else {\n              code = 'PORT_NOT_ACCESSIBLE';\n            }\n            break;\n          case 'ECONNRESET':\n            code = 'INVALID_CERTIFICATE';\n            break;\n          default:\n            code = originalCode;\n            break;\n        }\n        this.emit('heartbeat.error', { code: code, originalCode: originalCode, message: message });\n      }\n    })\n  }, {\n    key: 'getServerUri',\n    value: function getServerUri() {\n      return this._serverUri;\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      this._closed = true;\n      if (this._connected) {\n        this._disconnect();\n      }\n      if (this._reconnectTimer) {\n        clearTimeout(this._reconnectTimer);\n      }\n      this._cleanWebSocket();\n      this._cachedMessages = [];\n      this._reconnectTime = INITIAL_RECONNECT_TIME_MS;\n      if (this._heartbeatInterval != null) {\n        clearInterval(this._heartbeatInterval);\n      }\n    }\n  }, {\n    key: 'isConnected',\n    value: function isConnected() {\n      return this._connected;\n    }\n  }]);\n\n  return NuclideSocket;\n})(EventEmitter);\n\nmodule.exports = NuclideSocket;\n// ID from a setTimeout() call.\n//# sourceMappingURL=data:application/json;base64,\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/utils.js":"\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar url = require('url');\nvar request = require('request');\nvar MAX_REQUEST_LENGTH = 1e6;\n\n/**\n * Promisified version of the request function:\n * https://www.npmjs.com/package/request#requestoptions-callback\n * Defaults to using the node's querystring module to encode the url query parameters.\n * If you want to use the npm's qs module to encode the query parameters, explicitly provide the option:\n * {useQuerystring: false}\n */\nfunction asyncRequest(options) {\n  return new Promise(function (resolve, reject) {\n    if (options.useQuerystring === undefined) {\n      options.useQuerystring = true;\n    }\n    request(options, function (error, response, body) {\n      if (error) {\n        reject(error);\n      } else if (response.statusCode < 200 || response.statusCode >= 300) {\n        var errorJson = body;\n        if (typeof body !== 'object') {\n          try {\n            errorJson = JSON.parse(body);\n          } catch (err) {\n            // 404 responses aren't currently JSON.\n            errorJson = { message: body };\n          }\n        }\n        var err = new Error(errorJson.message);\n        // Success http status codes range from 200 to 299.\n        err.code = errorJson.code || response.statusCode;\n        reject(err);\n      } else {\n        resolve({ body: body, response: response });\n      }\n    });\n  });\n}\n\n/**\n * Write a text or convert to text response with an optional status code.\n */\nfunction sendTextResponse(response, text, statusCode) {\n  if (typeof statusCode === 'number') {\n    response.statusCode = statusCode;\n  }\n  response.write(text || '');\n  response.end();\n}\n\n/**\n * Write a json response text with an optional status code.\n */\nfunction sendJsonResponse(response, json, statusCode) {\n  response.setHeader('Content-Type', 'application/json');\n  sendTextResponse(response, JSON.stringify(json), statusCode);\n}\n\n/**\n  * Parses the request body in an anyc/promise way\n  */\nfunction parseRequestBody(httpRequest, isJson) {\n  return new Promise(function (resolve, reject) {\n    var body = '';\n    httpRequest.on('data', function (data) {\n      body += data;\n      // too much POST data, kill the connection!\n      if (body.length > MAX_REQUEST_LENGTH) {\n        reject(new Error('body is too big'));\n        httpRequest.connection.destroy();\n      }\n    });\n    httpRequest.on('end', function () {\n      return resolve(isJson ? JSON.parse(body) : body);\n    });\n  });\n}\n\n/**\n * Parses the url parameters ?abc=erf&lol=432c\n */\nfunction getQueryParameters(requestUrl) {\n  var _url$parse = url.parse(requestUrl, true);\n\n  var query = _url$parse.query;\n\n  return query;\n}\n\n/**\n * Serializes the method arguments to args and argTypes arrays\n * to send the metadata about the argument types with the data\n * to help the server understand and parse it.\n */\nfunction serializeArgs(args) {\n  var argsOnHttp = [];\n  var argTypes = [];\n  args.forEach(function (arg) {\n    // I do this because nulls are normally sent as empty strings\n    if (arg === undefined) {\n      argsOnHttp.push('');\n      argTypes.push('undefined');\n    } else if (typeof arg === 'string') {\n      argsOnHttp.push(arg);\n      argTypes.push('string');\n    } else {\n      // object, number, boolean null\n      argsOnHttp.push(JSON.stringify(arg));\n      argTypes.push('object');\n    }\n  });\n  return {\n    args: argsOnHttp,\n    argTypes: argTypes\n  };\n}\n\n/**\n * Deserializes a url with query parameters: args, argTypes to an array\n * of the original arguments of the same types the client called the function with.\n */\nfunction deserializeArgs(requestUrl) {\n  var _getQueryParameters = getQueryParameters(requestUrl);\n\n  var args = _getQueryParameters.args;\n  var argTypes = _getQueryParameters.argTypes;\n\n  args = args || [];\n  argTypes = argTypes || [];\n  var argsArray = Array.isArray(args) ? args : [args];\n  var argTypesArray = Array.isArray(argTypes) ? argTypes : [argTypes];\n  return argsArray.map(function (arg, i) {\n    // I do this because nulls are normally sent as empty strings.\n    if (argTypesArray[i] === 'undefined') {\n      return undefined;\n    } else if (argTypesArray[i] === 'string') {\n      return arg;\n    } else {\n      // some methods have options object arguments.\n      return JSON.parse(arg);\n    }\n  });\n}\n\nmodule.exports = {\n  asyncRequest: asyncRequest,\n  deserializeArgs: deserializeArgs,\n  getQueryParameters: getQueryParameters,\n  parseRequestBody: parseRequestBody,\n  sendJsonResponse: sendJsonResponse,\n  sendTextResponse: sendTextResponse,\n  serializeArgs: serializeArgs\n};\n//# sourceMappingURL=data:application/json;base64,\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/service-manager.js":"\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar logger = require('nuclide-logging').getLogger();\n\n// A cache stores services in form of '$serviceName@$cwd' => $serviceObject.\nvar cachedServices = new Map();\n\nfunction optionsToString(options) {\n  if (!options) {\n    return '';\n  } else if (options instanceof Array) {\n    return '[' + options.map(function (item) {\n      return optionsToString(item);\n    }).join(', ') + ']';\n  } else if (options instanceof Object) {\n    var keys = Object.keys(options).sort();\n    return '{' + keys.map(function (key) {\n      return key + ': ' + optionsToString(options[key]);\n    }).join(', ') + '}';\n  } else if (typeof options === 'number' || typeof options === 'boolean' || typeof options === 'string') {\n    return JSON.stringify(options);\n  } else {\n    throw Error('Can\\'t stringify %o', options);\n  }\n}\n\n/**\n * Create a new or retrieve a cached service instance by serviceName and service options.\n */\nfunction getService(serviceName, options, localImplementationClassPath) {\n  var key = serviceName + '@' + optionsToString(options);\n  if (!cachedServices.has(key)) {\n    logger.debug('Create service instance: ' + key);\n    var serviceInstance = createLocalService(serviceName, localImplementationClassPath, options);\n    cachedServices.set(key, serviceInstance);\n  }\n  return cachedServices.get(key);\n}\n\nfunction createLocalService(serviceName, localImplementationClassPath, options) {\n  var serviceModule = require(localImplementationClassPath);\n  var serviceClass = serviceModule[serviceName] || serviceModule;\n  return new serviceClass(options);\n}\n\nfunction getRemoteEventName(serviceName, eventMethodName, serviceOptions) {\n  return getLocalEventName(serviceName, eventMethodName) + '@' + optionsToString(serviceOptions);\n}\n\nfunction getLocalEventName(serviceName, eventMethodName) {\n  return serviceName + '/' + eventMethodName;\n}\n\nmodule.exports = {\n  getService: getService,\n  getRemoteEventName: getRemoteEventName,\n  optionsToString: optionsToString\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvc2VydmljZS1tYW5hZ2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7OztBQVdaLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDOzs7QUFHdEQsSUFBTSxjQUFnQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7O0FBRW5ELFNBQVMsZUFBZSxDQUFDLE9BQWEsRUFBVTtBQUM5QyxNQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osV0FBTyxFQUFFLENBQUM7R0FDWCxNQUFNLElBQUksT0FBTyxZQUFZLEtBQUssRUFBRTtBQUNuQyxXQUFPLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSTthQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUM7S0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztHQUMxRSxNQUFNLElBQUksT0FBTyxZQUFZLE1BQU0sRUFBRTtBQUNwQyxRQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3pDLFdBQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHO2FBQUksR0FBRyxHQUFHLElBQUksR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7R0FDM0YsTUFBTSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLE9BQU8sS0FBSyxTQUFTLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQ3JHLFdBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUNoQyxNQUFNO0FBQ0wsVUFBTSxLQUFLLENBQUMscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDN0M7Q0FDRjs7Ozs7QUFLRCxTQUFTLFVBQVUsQ0FBQyxXQUFtQixFQUFFLE9BQVksRUFBRSw0QkFBb0MsRUFBTztBQUNoRyxNQUFNLEdBQUcsR0FBRyxXQUFXLEdBQUcsR0FBRyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN6RCxNQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUM1QixVQUFNLENBQUMsS0FBSywrQkFBNkIsR0FBRyxDQUFHLENBQUM7QUFDaEQsUUFBTSxlQUFlLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxFQUFFLDRCQUE0QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9GLGtCQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztHQUMxQztBQUNELFNBQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNoQzs7QUFFRCxTQUFTLGtCQUFrQixDQUFDLFdBQW1CLEVBQUUsNEJBQW9DLEVBQUUsT0FBWSxFQUFPO0FBQ3hHLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBQzVELE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxhQUFhLENBQUM7QUFDakUsU0FBTyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNsQzs7QUFFRCxTQUFTLGtCQUFrQixDQUFDLFdBQW1CLEVBQUUsZUFBdUIsRUFBRSxjQUFtQixFQUFVO0FBQ3JHLFNBQU8saUJBQWlCLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxlQUFlLENBQUMsY0FBYyxDQUFDLENBQUM7Q0FDaEc7O0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxXQUFtQixFQUFFLGVBQXVCLEVBQVU7QUFDL0UsU0FBTyxXQUFXLEdBQUcsR0FBRyxHQUFHLGVBQWUsQ0FBQztDQUM1Qzs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsWUFBVSxFQUFWLFVBQVU7QUFDVixvQkFBa0IsRUFBbEIsa0JBQWtCO0FBQ2xCLGlCQUFlLEVBQWYsZUFBZTtDQUNoQixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvc2VydmljZS1tYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnbnVjbGlkZS1sb2dnaW5nJykuZ2V0TG9nZ2VyKCk7XG5cbi8vIEEgY2FjaGUgc3RvcmVzIHNlcnZpY2VzIGluIGZvcm0gb2YgJyRzZXJ2aWNlTmFtZUAkY3dkJyA9PiAkc2VydmljZU9iamVjdC5cbmNvbnN0IGNhY2hlZFNlcnZpY2VzOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBvcHRpb25zVG9TdHJpbmcob3B0aW9uczogP2FueSk6IHN0cmluZyB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIHJldHVybiAnJztcbiAgfSBlbHNlIGlmIChvcHRpb25zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gJ1snICsgb3B0aW9ucy5tYXAoaXRlbSA9PiBvcHRpb25zVG9TdHJpbmcoaXRlbSkpLmpvaW4oJywgJykgKyAnXSc7XG4gIH0gZWxzZSBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKS5zb3J0KCk7XG4gICAgcmV0dXJuICd7JyArIGtleXMubWFwKGtleSA9PiBrZXkgKyAnOiAnICsgb3B0aW9uc1RvU3RyaW5nKG9wdGlvbnNba2V5XSkpLmpvaW4oJywgJykgKyAnfSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInIHx8IHR5cGVvZiBvcHRpb25zID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IEVycm9yKCdDYW5cXCd0IHN0cmluZ2lmeSAlbycsIG9wdGlvbnMpO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG9yIHJldHJpZXZlIGEgY2FjaGVkIHNlcnZpY2UgaW5zdGFuY2UgYnkgc2VydmljZU5hbWUgYW5kIHNlcnZpY2Ugb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZ2V0U2VydmljZShzZXJ2aWNlTmFtZTogc3RyaW5nLCBvcHRpb25zOiBhbnksIGxvY2FsSW1wbGVtZW50YXRpb25DbGFzc1BhdGg6IHN0cmluZyk6IGFueSB7XG4gIGNvbnN0IGtleSA9IHNlcnZpY2VOYW1lICsgJ0AnICsgb3B0aW9uc1RvU3RyaW5nKG9wdGlvbnMpO1xuICBpZiAoIWNhY2hlZFNlcnZpY2VzLmhhcyhrZXkpKSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBDcmVhdGUgc2VydmljZSBpbnN0YW5jZTogJHtrZXl9YCk7XG4gICAgY29uc3Qgc2VydmljZUluc3RhbmNlID0gY3JlYXRlTG9jYWxTZXJ2aWNlKHNlcnZpY2VOYW1lLCBsb2NhbEltcGxlbWVudGF0aW9uQ2xhc3NQYXRoLCBvcHRpb25zKTtcbiAgICBjYWNoZWRTZXJ2aWNlcy5zZXQoa2V5LCBzZXJ2aWNlSW5zdGFuY2UpO1xuICB9XG4gIHJldHVybiBjYWNoZWRTZXJ2aWNlcy5nZXQoa2V5KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYWxTZXJ2aWNlKHNlcnZpY2VOYW1lOiBzdHJpbmcsIGxvY2FsSW1wbGVtZW50YXRpb25DbGFzc1BhdGg6IHN0cmluZywgb3B0aW9uczogYW55KTogYW55IHtcbiAgY29uc3Qgc2VydmljZU1vZHVsZSA9IHJlcXVpcmUobG9jYWxJbXBsZW1lbnRhdGlvbkNsYXNzUGF0aCk7XG4gIGNvbnN0IHNlcnZpY2VDbGFzcyA9IHNlcnZpY2VNb2R1bGVbc2VydmljZU5hbWVdIHx8IHNlcnZpY2VNb2R1bGU7XG4gIHJldHVybiBuZXcgc2VydmljZUNsYXNzKG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBnZXRSZW1vdGVFdmVudE5hbWUoc2VydmljZU5hbWU6IHN0cmluZywgZXZlbnRNZXRob2ROYW1lOiBzdHJpbmcsIHNlcnZpY2VPcHRpb25zOiBhbnkpOiBzdHJpbmcge1xuICByZXR1cm4gZ2V0TG9jYWxFdmVudE5hbWUoc2VydmljZU5hbWUsIGV2ZW50TWV0aG9kTmFtZSkgKyAnQCcgKyBvcHRpb25zVG9TdHJpbmcoc2VydmljZU9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBnZXRMb2NhbEV2ZW50TmFtZShzZXJ2aWNlTmFtZTogc3RyaW5nLCBldmVudE1ldGhvZE5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzZXJ2aWNlTmFtZSArICcvJyArIGV2ZW50TWV0aG9kTmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldFNlcnZpY2UsXG4gIGdldFJlbW90ZUV2ZW50TmFtZSxcbiAgb3B0aW9uc1RvU3RyaW5nLFxufTtcbiJdfQ==\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/services/NuclideSearchService.js":"\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n// TODO (mikeo): Make this another search provider\n\nvar doSearchDirectory = _asyncToGenerator(function* (directoryUri, query) {\n  var search = fileSearchers[directoryUri];\n  if (search === undefined) {\n    var directory = remoteUri.parse(directoryUri).path;\n\n    var exists = yield fsPromise.exists(directory);\n    if (!exists) {\n      throw new Error('Could not find directory to search : ' + directory);\n    }\n\n    var stat = yield fsPromise.stat(directory);\n    if (!stat.isDirectory()) {\n      throw new Error('Provided path is not a directory : ' + directory);\n    }\n\n    search = yield fileSearchForDirectory(directoryUri);\n    fileSearchers[directoryUri] = search;\n  }\n\n  return yield search.query(query);\n});\n\nvar getSearchProviders = _asyncToGenerator(function* (cwd) {\n  var checkAvailability = _asyncToGenerator(function* (providerName) {\n    var isAvailable = yield providers[providerName].isAvailable(cwd);\n    return isAvailable ? { name: providerName } : null;\n  });\n\n  var validPromises = [];\n\n  for (var _name in providers) {\n    validPromises.push(checkAvailability(_name));\n  }\n\n  var results = yield Promise.all(validPromises);\n  return results.filter(function (provider) {\n    return !!provider;\n  });\n});\n\nvar doSearchQuery = _asyncToGenerator(function* (cwd, provider, query) {\n  var currentProvider = providers[provider];\n  if (!currentProvider) {\n    throw new Error('Invalid provider: ' + provider);\n  }\n  var results = yield currentProvider.query(cwd, query);\n  return { results: results };\n});\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\nvar _require = require('nuclide-commons');\n\nvar fsPromise = _require.fsPromise;\n\nvar _require2 = require('nuclide-path-search');\n\nvar fileSearchForDirectory = _require2.fileSearchForDirectory;\n\nvar remoteUri = require('nuclide-remote-uri');\n\nvar providers = undefined;\n\n/*\n * TODO(williamsc): This needs to have some better\n *                  managment tools (Adding/removing query sets).\n */\n\n// Cache of previously indexed folders for later use.\nvar fileSearchers = Object.create(null);\n\nfunction addProvider(name, provider) {\n  providers = providers || {};\n  if (providers[name]) {\n    throw new Error(name + ' has already been added as a provider.');\n  }\n  providers[name] = provider;\n}\n\nfunction clearProviders() {\n  providers = undefined;\n}\n\nfunction initialize(server) {}\n\nfunction shutdown(server) {\n  clearProviders();\n  for (var k in fileSearchers) {\n    fileSearchers[k].dispose();\n  }\n  fileSearchers = Object.create(null);\n}\n\nmodule.exports = {\n  initialize: initialize,\n  shutdown: shutdown,\n  addProvider: addProvider,\n  clearProviders: clearProviders,\n  services: {\n    '/search/query': { handler: doSearchQuery, method: 'post' },\n    '/search/listProviders': { handler: getSearchProviders, method: 'post' },\n    '/search/directory': { handler: doSearchDirectory }\n  }\n};\n//# sourceMappingURL=data:application/json;base64,\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/services/FileSystemService.js":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.exists = exists;\nexports.findNearestFile = findNearestFile;\nexports.lstat = lstat;\nexports.mkdir = mkdir;\nexports.mkdirp = mkdirp;\n\n/**\n * If no file (or directory) at the specified path exists, creates the parent\n * directories (if necessary) and then writes an empty file at the specified\n * path.\n *\n * @return A boolean indicating whether the file was created.\n */\n\nvar newFile = _asyncToGenerator(function* (filePath) {\n  var isExistingFile = yield fsPromise.exists(filePath);\n  if (isExistingFile) {\n    return false;\n  }\n  yield fsPromise.mkdirp(pathUtil.dirname(filePath));\n  yield fsPromise.writeFile(filePath, '');\n  return true;\n}\n\n/**\n * The readdir endpoint accepts the following query parameters:\n *\n *   path: path to the folder to list entries inside.\n *\n * Body contains a JSON encoded array of objects with file: and stats: entries.\n * file: has the file or directory name, stats: has the stats of the file/dir,\n * isSymbolicLink: true if the entry is a symlink to another filesystem location.\n */\n);\n\nexports.newFile = newFile;\n\nvar readdir = _asyncToGenerator(function* (path) {\n  var files = yield fsPromise.readdir(path);\n  var entries = yield Promise.all(files.map(_asyncToGenerator(function* (file) {\n    var fullpath = pathUtil.join(path, file);\n    var lstats = yield fsPromise.lstat(fullpath);\n    if (!lstats.isSymbolicLink()) {\n      return { file: file, stats: lstats, isSymbolicLink: false };\n    } else {\n      try {\n        var stats = yield fsPromise.stat(fullpath);\n        return { file: file, stats: stats, isSymbolicLink: true };\n      } catch (error) {\n        return { file: file, stats: undefined, isSymbolicLink: true, error: error };\n      }\n    }\n  })));\n  // TODO: Return entries directly and change client to handle error.\n  return entries.filter(function (entry) {\n    return entry.error === undefined;\n  }).map(function (entry) {\n    return { file: entry.file, stats: entry.stats, isSymbolicLink: entry.isSymbolicLink };\n  });\n}\n\n/**\n * Gets the real path of a file path.\n * It could be different than the given path if the file is a symlink\n * or exists in a symlinked directory.\n */\n);\n\nexports.readdir = readdir;\nexports.realpath = realpath;\nexports.resolveRealPath = resolveRealPath;\nexports.rename = rename;\n\n/**\n * Runs the equivalent of `cp sourcePath destinationPath`.\n */\n\nvar copy = _asyncToGenerator(function* (sourcePath, destinationPath) {\n  var isExistingFile = yield fsPromise.exists(destinationPath);\n  if (isExistingFile) {\n    return false;\n  }\n  yield new Promise(function (resolve, reject) {\n    var fsPlus = require('fs-plus');\n    fsPlus.copy(sourcePath, destinationPath, function (error) {\n      error ? reject(error) : resolve();\n    });\n  });\n  return true;\n}\n\n/**\n * Removes directories even if they are non-empty. Does not fail if the directory doesn't exist.\n */\n);\n\nexports.copy = copy;\nexports.rmdir = rmdir;\nexports.stat = stat;\nexports.unlink = unlink;\nexports.readFile = readFile;\n\n/**\n * The writeFile endpoint accepts the following query parameters:\n *\n *   path: path to the file to read (it must be url encoded).\n *   options: options to pass to fs.writeFile\n *\n * TODO: move to nuclide-commons and rename to writeFileAtomic\n */\n\nvar writeFile = _asyncToGenerator(function* (path, data, options) {\n\n  var complete = false;\n  var tempFilePath = yield fsPromise.tempfile('nuclide');\n  try {\n    yield fsPromise.writeFile(tempFilePath, data, options);\n\n    // Ensure file still has original permissions:\n    // https://github.com/facebook/nuclide/issues/157\n    // We update the mode of the temp file rather than the destination file because\n    // if we did the mv() then the chmod(), there would be a brief period between\n    // those two operations where the destination file might have the wrong permissions.\n    var permissions = null;\n    try {\n      permissions = (yield fsPromise.stat(path)).mode;\n    } catch (e) {\n      // If the file does not exist, then ENOENT will be thrown.\n      if (e.code !== 'ENOENT') {\n        throw e;\n      }\n    }\n    if (permissions != null) {\n      yield fsPromise.chmod(tempFilePath, permissions);\n    }\n\n    // TODO(mikeo): put renames into a queue so we don't write older save over new save.\n    // Use mv as fs.rename doesn't work across partitions.\n    yield mvPromise(tempFilePath, path);\n    complete = true;\n  } finally {\n    if (!complete) {\n      yield fsPromise.unlink(tempFilePath);\n    }\n  }\n});\n\nexports.writeFile = writeFile;\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\n///////////////////\n//\n// Services\n//\n//////////////////\n\n/**\n * Checks a certain path for existence and returns 'true'/'false' accordingly\n */\n'use babel';\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n/**\n * This code implements the NuclideFs service.  It exports the FS on http via\n * the endpoint: http://your.server:your_port/fs/method where method is one of\n * readFile, writeFile, etc.\n */\n\nvar mv = require('mv');\nvar fs = require('fs');\nvar pathUtil = require('path');\n\nvar _require = require('nuclide-commons');\n\nvar fsPromise = _require.fsPromise;\n\nfunction exists(path) {\n  return fsPromise.exists(path);\n}\n\nfunction findNearestFile(fileName, pathToDirectory) {\n  return fsPromise.findNearestFile(fileName, pathToDirectory);\n}\n\n/**\n * The lstat endpoint is the same as the stat endpoint except it will return\n * the stat of a link instead of the file the link points to.\n */\n\nfunction lstat(path) {\n  return fsPromise.lstat(path);\n}\n\n/**\n * Creates a new directory with the given path.\n * Throws EEXIST error if the directory already exists.\n * Throws ENOENT if the path given is nested in a non-existing directory.\n */\n\nfunction mkdir(path) {\n  return fsPromise.mkdir(path);\n}\n\n/**\n * Runs the equivalent of `mkdir -p` with the given path.\n *\n * Like most implementations of mkdirp, if it fails, it is possible that\n * directories were created for some prefix of the given path.\n * @return true if the path was created; false if it already existed.\n */\n\nfunction mkdirp(path) {\n  return fsPromise.mkdirp(path);\n}\n\nfunction realpath(path) {\n  return fsPromise.realpath(path);\n}\n\nfunction resolveRealPath(path) {\n  return fsPromise.realpath(fsPromise.expandHomeDir(path));\n}\n\n/**\n * Runs the equivalent of `mv sourcePath destinationPath`.\n */\n\nfunction rename(sourcePath, destinationPath) {\n  return new Promise(function (resolve, reject) {\n    var fsPlus = require('fs-plus');\n    fsPlus.move(sourcePath, destinationPath, function (error) {\n      error ? reject(error) : resolve();\n    });\n  });\n}\n\nfunction rmdir(path) {\n  return fsPromise.rmdir(path);\n}\n\n/**\n * The stat endpoint accepts the following query parameters:\n *\n *   path: path to the file to read\n *\n */\n\nfunction stat(path) {\n  return fsPromise.stat(path);\n}\n\n/**\n * Removes files. Does not fail if the file doesn't exist.\n */\n\nfunction unlink(path) {\n  return fsPromise.unlink(path)['catch'](function (error) {\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  });\n}\n\n/**\n *   path: the path to the file to read\n *   options: options to pass to fs.readFile.\n *      Note that options does NOT include 'encoding' this ensures that the return value\n *      is always a Buffer and never a string.\n *\n *   Callers who want a string should call buffer.toString('utf8').\n */\n\nfunction readFile(path, options) {\n  return fsPromise.readFile(path, options);\n}\n\n// TODO: Move to nuclide-commons\nfunction mvPromise(sourcePath, destinationPath) {\n  return new Promise(function (resolve, reject) {\n    mv(sourcePath, destinationPath, { mkdirp: false }, function (error) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n//# sourceMappingURL=data:application/json;base64,\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/services/InfoService.js":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar getServerVersion = _asyncToGenerator(function* () {\n  return (0, _nuclideVersion.getVersion)();\n});\n\nexports.getServerVersion = getServerVersion;\nexports.shutdownServer = shutdownServer;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar _nuclideVersion = require('nuclide-version');\n\nvar _NuclideServer = require('../NuclideServer');\n\nvar _NuclideServer2 = _interopRequireDefault(_NuclideServer);\n\n'use babel';\n\nfunction shutdownServer() {\n  _NuclideServer2['default'].shutdown();\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvc2VydmljZXMvSW5mb1NlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztJQWNzQixnQkFBZ0IscUJBQS9CLGFBQW1EO0FBQ3hELFNBQU8sb0JBSkQsVUFBVSxHQUlHLENBQUM7Q0FDckI7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQUx3QixpQkFBaUI7OzZCQUNoQixrQkFBa0I7Ozs7QUFaNUMsV0FBVyxDQUFDOztBQWtCTCxTQUFTLGNBQWMsR0FBUztBQUNyQyw2QkFBYyxRQUFRLEVBQUUsQ0FBQztDQUMxQiIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zZXJ2ZXIvbGliL3NlcnZpY2VzL0luZm9TZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHtnZXRWZXJzaW9ufSBmcm9tICdudWNsaWRlLXZlcnNpb24nO1xuaW1wb3J0IE51Y2xpZGVTZXJ2ZXIgZnJvbSAnLi4vTnVjbGlkZVNlcnZlcic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTZXJ2ZXJWZXJzaW9uKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBnZXRWZXJzaW9uKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHV0ZG93blNlcnZlcigpOiB2b2lkIHtcbiAgTnVjbGlkZVNlcnZlci5zaHV0ZG93bigpO1xufVxuIl19\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/services/SourceControlService.js":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n/**\n * This is a workaround that should be removed when Atom 2.0 comes out.\n * See t6913624.\n */\n\nexports.getHgRepository = getHgRepository;\n'use babel';\n\nfunction getHgRepository(directoryPath) {\n  var _require = require('nuclide-source-control-helpers');\n\n  var findHgRepository = _require.findHgRepository;\n\n  return Promise.resolve(findHgRepository(directoryPath));\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvc2VydmljZXMvU291cmNlQ29udHJvbFNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsV0FBVyxDQUFDOztBQWtCTCxTQUFTLGVBQWUsQ0FBQyxhQUFxQixFQUFvQztpQkFDNUQsT0FBTyxDQUFDLGdDQUFnQyxDQUFDOztNQUE3RCxnQkFBZ0IsWUFBaEIsZ0JBQWdCOztBQUN2QixTQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztDQUN6RCIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zZXJ2ZXIvbGliL3NlcnZpY2VzL1NvdXJjZUNvbnRyb2xTZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyoqXG4gKiBUaGlzIGlzIGEgd29ya2Fyb3VuZCB0aGF0IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gQXRvbSAyLjAgY29tZXMgb3V0LlxuICogU2VlIHQ2OTEzNjI0LlxuICovXG5cbmltcG9ydCB0eXBlIHtIZ1JlcG9zaXRvcnlEZXNjcmlwdGlvbn0gZnJvbSAnbnVjbGlkZS1zb3VyY2UtY29udHJvbC1oZWxwZXJzL2xpYi9oZy1yZXBvc2l0b3J5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhnUmVwb3NpdG9yeShkaXJlY3RvcnlQYXRoOiBzdHJpbmcpOiBQcm9taXNlPEhnUmVwb3NpdG9yeURlc2NyaXB0aW9uPiB7XG4gIGNvbnN0IHtmaW5kSGdSZXBvc2l0b3J5fSA9IHJlcXVpcmUoJ251Y2xpZGUtc291cmNlLWNvbnRyb2wtaGVscGVycycpO1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZpbmRIZ1JlcG9zaXRvcnkoZGlyZWN0b3J5UGF0aCkpO1xufVxuIl19\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/NuclideClient.js":"\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n/**\n * This code implements the NuclideFs client.  It uses the request module to\n * make XHR requests to the NuclideFS service.  It is a Promise based API.\n */\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar NuclideClient = (function () {\n  function NuclideClient(id, eventbus) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    _classCallCheck(this, NuclideClient);\n\n    this._id = id;\n    this.eventbus = eventbus;\n    this._options = options;\n    this._searchProviders = {};\n  }\n\n  _createClass(NuclideClient, [{\n    key: 'getID',\n    value: function getID() {\n      return this._id;\n    }\n\n    // Resolves if the connection looks healthy.\n    // Will reject quickly if the connection looks unhealthy.\n  }, {\n    key: 'testConnection',\n    value: function testConnection() {\n      return this.eventbus.testConnection();\n    }\n\n    // Delegate RPC functions to the NuclideRemoteEventbus class.\n  }, {\n    key: 'callRemoteFunction',\n    value: function callRemoteFunction() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.eventbus.callRemoteFunction.apply(this.eventbus, args);\n    }\n  }, {\n    key: 'createRemoteObject',\n    value: function createRemoteObject() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this.eventbus.createRemoteObject.apply(this.eventbus, args);\n    }\n  }, {\n    key: 'callRemoteMethod',\n    value: function callRemoteMethod() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return this.eventbus.callRemoteMethod.apply(this.eventbus, args);\n    }\n  }, {\n    key: 'disposeRemoteObject',\n    value: function disposeRemoteObject() {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return this.eventbus.disposeRemoteObject.apply(this.eventbus, args);\n    }\n\n    // Delegate marshalling to the NuclideRemoteEventbus class.\n  }, {\n    key: 'marshal',\n    value: function marshal() {\n      var _eventbus;\n\n      return (_eventbus = this.eventbus).marshal.apply(_eventbus, arguments);\n    }\n  }, {\n    key: 'unmarshal',\n    value: function unmarshal() {\n      var _eventbus2;\n\n      return (_eventbus2 = this.eventbus).unmarshal.apply(_eventbus2, arguments);\n    }\n  }, {\n    key: 'registerType',\n    value: function registerType() {\n      var _eventbus3;\n\n      return (_eventbus3 = this.eventbus).registerType.apply(_eventbus3, arguments);\n    }\n\n    /**\n     * Make rpc call to service given serviceUri in form of `$serviceName/$methodName` and args as arguments list.\n     */\n  }, {\n    key: 'makeRpc',\n    value: function makeRpc(serviceUri, args, serviceOptions) {\n      var _serviceUri$split = serviceUri.split('/');\n\n      var _serviceUri$split2 = _slicedToArray(_serviceUri$split, 2);\n\n      var serviceName = _serviceUri$split2[0];\n      var methodName = _serviceUri$split2[1];\n\n      return this.eventbus.callServiceFrameworkMethod(serviceName, methodName,\n      /* methodArgs */args,\n      /* serviceOptions */serviceOptions);\n    }\n  }, {\n    key: 'registerEventListener',\n    value: function registerEventListener(eventName, callback, serviceOptions) {\n      return this.eventbus.registerEventListener(eventName, callback, serviceOptions);\n    }\n\n    /**\n     * Searches the contents of `directory` for paths mathing `query`.\n     */\n  }, {\n    key: 'searchDirectory',\n    value: _asyncToGenerator(function* (directory, query) {\n      return yield this.eventbus.callMethod(\n      /*serviceName*/'search',\n      /*methodName*/'directory',\n      /*methodArgs*/[directory, query],\n      /*extraOptions*/{ json: true });\n    })\n  }, {\n    key: 'doSearchQuery',\n    value: function doSearchQuery(rootDirectory, provider, query) {\n      return this.eventbus.callMethod(\n      /*serviceName*/'search',\n      /*methodName*/'query',\n      /*methodArgs*/[rootDirectory, provider, query],\n      /*extraOptions*/{ method: 'POST', json: true });\n    }\n  }, {\n    key: 'getSearchProviders',\n    value: _asyncToGenerator(function* (rootDirectory) {\n      var providers = this._searchProviders[rootDirectory];\n      if (providers) {\n        return providers;\n      }\n      providers = yield this.eventbus.callMethod(\n      /*serviceName*/'search',\n      /*methodName*/'listProviders',\n      /*methodArgs*/[rootDirectory],\n      /*extraOptions*/{ method: 'POST', json: true });\n\n      this._searchProviders[rootDirectory] = providers;\n\n      return providers;\n    })\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this.eventbus) {\n        this.eventbus.close();\n        this.eventbus = null;\n      }\n    }\n  }]);\n\n  return NuclideClient;\n})();\n\nmodule.exports = NuclideClient;\n//# sourceMappingURL=data:application/json;base64,\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/NuclideLocalEventbus.js":"\n/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = require('events');\n\nvar EventEmitter = _require.EventEmitter;\n\nvar _require2 = require('./config');\n\nvar loadConfigsOfServiceWithoutServiceFramework = _require2.loadConfigsOfServiceWithoutServiceFramework;\n\nvar NuclideLocalEventbus = (function (_EventEmitter) {\n  _inherits(NuclideLocalEventbus, _EventEmitter);\n\n  function NuclideLocalEventbus() {\n    var _this = this;\n\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, NuclideLocalEventbus);\n\n    _get(Object.getPrototypeOf(NuclideLocalEventbus.prototype), 'constructor', this).call(this);\n    this._options = options;\n    this._services = {};\n\n    this._enabledServices = loadConfigsOfServiceWithoutServiceFramework();\n\n    this._enabledServices.forEach(function (service_path) {\n      var _require3 = require(service_path);\n\n      var services = _require3.services;\n\n      for (var serviceId in services) {\n        _this._services[serviceId] = services[serviceId];\n      }\n    });\n\n    // Run initialize after all services registered if exists.\n    this._enabledServices.forEach(function (service_path) {\n      var _require4 = require(service_path);\n\n      var initialize = _require4.initialize;\n\n      if (initialize) {\n        initialize(_this);\n      }\n    });\n\n    var _require5 = require('nuclide-commons');\n\n    var fsPromise = _require5.fsPromise;\n\n    // readFile and writeFile aren't exposed as services for performance optimization.\n    this._services['/fs/readFile'] = { handler: fsPromise.readFile };\n    this._services['/fs/writeFile'] = { handler: fsPromise.writeFile };\n  }\n\n  _createClass(NuclideLocalEventbus, [{\n    key: 'testConnection',\n    value: function testConnection() {\n      return Promise.resolve();\n    }\n  }, {\n    key: 'callMethod',\n    value: _asyncToGenerator(function* (serviceName, methodName, methodArgs, extraOptions) {\n\n      var serviceId = '/' + serviceName + '/' + methodName;\n      // extend the default options with the extra options\n      var service = this._services[serviceId];\n      if (!service) {\n        throw new Error('Cannot call a non registered local service with id: ' + serviceId);\n      }\n      return service.handler.apply(this, methodArgs);\n    })\n  }, {\n    key: 'callService',\n    value: function callService(serviceName, args) {\n      var serviceFunction = this._services[serviceName];\n      if (!serviceFunction) {\n        throw Error('No service registered with name: ' + serviceName);\n      }\n      return serviceFunction.handler.apply(this, args);\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this2 = this;\n\n      this._enabledServices.forEach(function (service_path) {\n        var _require6 = require(service_path);\n\n        var shutdown = _require6.shutdown;\n\n        if (shutdown) {\n          shutdown(_this2);\n        }\n      });\n    }\n  }]);\n\n  return NuclideLocalEventbus;\n})(EventEmitter);\n\nmodule.exports = NuclideLocalEventbus;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvTnVjbGlkZUxvY2FsRXZlbnRidXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQVdXLE9BQU8sQ0FBQyxRQUFRLENBQUM7O0lBQWpDLFlBQVksWUFBWixZQUFZOztnQkFFbUMsT0FBTyxDQUFDLFVBQVUsQ0FBQzs7SUFBbEUsMkNBQTJDLGFBQTNDLDJDQUEyQzs7SUFJNUMsb0JBQW9CO1lBQXBCLG9CQUFvQjs7QUFDYixXQURQLG9CQUFvQixHQUNFOzs7UUFBZCxPQUFPLHlEQUFHLEVBQUU7OzBCQURwQixvQkFBb0I7O0FBRXRCLCtCQUZFLG9CQUFvQiw2Q0FFZDtBQUNSLFFBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0FBQ3hCLFFBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDOztBQUVwQixRQUFJLENBQUMsZ0JBQWdCLEdBQUcsMkNBQTJDLEVBQUUsQ0FBQzs7QUFFdEUsUUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQVksRUFBSztzQkFDM0IsT0FBTyxDQUFDLFlBQVksQ0FBQzs7VUFBakMsUUFBUSxhQUFSLFFBQVE7O0FBQ2YsV0FBSyxJQUFNLFNBQVMsSUFBSSxRQUFRLEVBQUU7QUFDaEMsY0FBSyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO09BQ2pEO0tBQ0YsQ0FBQyxDQUFDOzs7QUFHSCxRQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQUMsWUFBWSxFQUFLO3NCQUN6QixPQUFPLENBQUMsWUFBWSxDQUFDOztVQUFuQyxVQUFVLGFBQVYsVUFBVTs7QUFDakIsVUFBSSxVQUFVLEVBQUU7QUFDZCxrQkFBVSxPQUFNLENBQUM7T0FDbEI7S0FDRixDQUFDLENBQUM7O29CQUVpQixPQUFPLENBQUMsaUJBQWlCLENBQUM7O1FBQXZDLFNBQVMsYUFBVCxTQUFTOzs7QUFHaEIsUUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFDLENBQUM7QUFDL0QsUUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsU0FBUyxFQUFDLENBQUM7R0FDbEU7O2VBNUJHLG9CQUFvQjs7V0E4QlYsMEJBQWtCO0FBQzlCLGFBQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQzFCOzs7NkJBRWUsV0FDWixXQUFtQixFQUNuQixVQUFrQixFQUNsQixVQUF1QixFQUN2QixZQUFrQixFQUNHOztBQUV2QixVQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxVQUFVLENBQUM7O0FBRXZELFVBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDMUMsVUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNaLGNBQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELEdBQUcsU0FBUyxDQUFDLENBQUM7T0FDckY7QUFDRCxhQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztLQUNoRDs7O1dBRVUscUJBQUMsV0FBbUIsRUFBRSxJQUFnQixFQUFnQjtBQUMvRCxVQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3BELFVBQUksQ0FBQyxlQUFlLEVBQUU7QUFDcEIsY0FBTSxLQUFLLENBQUMsbUNBQW1DLEdBQUcsV0FBVyxDQUFDLENBQUM7T0FDaEU7QUFDRCxhQUFPLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNsRDs7O1dBRUksaUJBQVM7OztBQUNaLFVBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBQyxZQUFZLEVBQUs7d0JBQzNCLE9BQU8sQ0FBQyxZQUFZLENBQUM7O1lBQWpDLFFBQVEsYUFBUixRQUFROztBQUNmLFlBQUksUUFBUSxFQUFFO0FBQ1osa0JBQVEsUUFBTSxDQUFDO1NBQ2hCO09BQ0YsQ0FBQyxDQUFDO0tBQ0o7OztTQWpFRyxvQkFBb0I7R0FBUyxZQUFZOztBQW9FL0MsTUFBTSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zZXJ2ZXIvbGliL051Y2xpZGVMb2NhbEV2ZW50YnVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3Qge0V2ZW50RW1pdHRlcn0gPSByZXF1aXJlKCdldmVudHMnKTtcblxuY29uc3Qge2xvYWRDb25maWdzT2ZTZXJ2aWNlV2l0aG91dFNlcnZpY2VGcmFtZXdvcmt9ID0gcmVxdWlyZSgnLi9jb25maWcnKTtcblxuXG5cbmNsYXNzIE51Y2xpZGVMb2NhbEV2ZW50YnVzIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLl9zZXJ2aWNlcyA9IHt9O1xuXG4gICAgdGhpcy5fZW5hYmxlZFNlcnZpY2VzID0gbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRob3V0U2VydmljZUZyYW1ld29yaygpO1xuXG4gICAgdGhpcy5fZW5hYmxlZFNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2VfcGF0aCkgPT4ge1xuICAgICAgY29uc3Qge3NlcnZpY2VzfSA9IHJlcXVpcmUoc2VydmljZV9wYXRoKTtcbiAgICAgIGZvciAoY29uc3Qgc2VydmljZUlkIGluIHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuX3NlcnZpY2VzW3NlcnZpY2VJZF0gPSBzZXJ2aWNlc1tzZXJ2aWNlSWRdO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gUnVuIGluaXRpYWxpemUgYWZ0ZXIgYWxsIHNlcnZpY2VzIHJlZ2lzdGVyZWQgaWYgZXhpc3RzLlxuICAgIHRoaXMuX2VuYWJsZWRTZXJ2aWNlcy5mb3JFYWNoKChzZXJ2aWNlX3BhdGgpID0+IHtcbiAgICAgIGNvbnN0IHtpbml0aWFsaXplfSA9IHJlcXVpcmUoc2VydmljZV9wYXRoKTtcbiAgICAgIGlmIChpbml0aWFsaXplKSB7XG4gICAgICAgIGluaXRpYWxpemUodGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCB7ZnNQcm9taXNlfSA9IHJlcXVpcmUoJ251Y2xpZGUtY29tbW9ucycpO1xuXG4gICAgLy8gcmVhZEZpbGUgYW5kIHdyaXRlRmlsZSBhcmVuJ3QgZXhwb3NlZCBhcyBzZXJ2aWNlcyBmb3IgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgIHRoaXMuX3NlcnZpY2VzWycvZnMvcmVhZEZpbGUnXSA9IHtoYW5kbGVyOiBmc1Byb21pc2UucmVhZEZpbGV9O1xuICAgIHRoaXMuX3NlcnZpY2VzWycvZnMvd3JpdGVGaWxlJ10gPSB7aGFuZGxlcjogZnNQcm9taXNlLndyaXRlRmlsZX07XG4gIH1cblxuICB0ZXN0Q29ubmVjdGlvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBhc3luYyBjYWxsTWV0aG9kKFxuICAgICAgc2VydmljZU5hbWU6IHN0cmluZyxcbiAgICAgIG1ldGhvZE5hbWU6IHN0cmluZyxcbiAgICAgIG1ldGhvZEFyZ3M6ID9BcnJheTxhbnk+LFxuICAgICAgZXh0cmFPcHRpb25zOiA/YW55XG4gICAgKTogUHJvbWlzZTxzdHJpbmd8YW55PiB7XG5cbiAgICBjb25zdCBzZXJ2aWNlSWQgPSAnLycgKyBzZXJ2aWNlTmFtZSArICcvJyArIG1ldGhvZE5hbWU7XG4gICAgLy8gZXh0ZW5kIHRoZSBkZWZhdWx0IG9wdGlvbnMgd2l0aCB0aGUgZXh0cmEgb3B0aW9uc1xuICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLl9zZXJ2aWNlc1tzZXJ2aWNlSWRdO1xuICAgIGlmICghc2VydmljZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY2FsbCBhIG5vbiByZWdpc3RlcmVkIGxvY2FsIHNlcnZpY2Ugd2l0aCBpZDogJyArIHNlcnZpY2VJZCk7XG4gICAgfVxuICAgIHJldHVybiBzZXJ2aWNlLmhhbmRsZXIuYXBwbHkodGhpcywgbWV0aG9kQXJncyk7XG4gIH1cblxuICBjYWxsU2VydmljZShzZXJ2aWNlTmFtZTogc3RyaW5nLCBhcmdzOiBBcnJheTxhbnk+KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCBzZXJ2aWNlRnVuY3Rpb24gPSB0aGlzLl9zZXJ2aWNlc1tzZXJ2aWNlTmFtZV07XG4gICAgaWYgKCFzZXJ2aWNlRnVuY3Rpb24pIHtcbiAgICAgIHRocm93IEVycm9yKCdObyBzZXJ2aWNlIHJlZ2lzdGVyZWQgd2l0aCBuYW1lOiAnICsgc2VydmljZU5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gc2VydmljZUZ1bmN0aW9uLmhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICBjbG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9lbmFibGVkU2VydmljZXMuZm9yRWFjaCgoc2VydmljZV9wYXRoKSA9PiB7XG4gICAgICBjb25zdCB7c2h1dGRvd259ID0gcmVxdWlyZShzZXJ2aWNlX3BhdGgpO1xuICAgICAgaWYgKHNodXRkb3duKSB7XG4gICAgICAgIHNodXRkb3duKHRoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTnVjbGlkZUxvY2FsRXZlbnRidXM7XG4iXX0=\n","/home/travis/build/npmtest/node-npmtest-nuclide-server/node_modules/nuclide-server/lib/nuclide-main.js":"/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n/**\n * This is the main insertion point for starting nuclide-server.\n */\n\n// Set up the on-the-fly transpiler.\nrequire('nuclide-node-transpiler');\n\n// Load the ES6+ server code now that the transpiler is in place.\nrequire('./main');\n"}